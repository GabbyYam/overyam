{"title":"Math-Medium","slug":"Math-Medium","date":"2020-04-30T07:38:42.000Z","updated":"2020-04-30T08:51:08.831Z","comments":true,"path":"api/articles/Math-Medium.json","excerpt":"Abstract：leetcode 数学tag Medium 难度题解合集","covers":["image-20200430154015296.png"],"content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css\"><div class=\".article-gallery\" <p><strong>Abstract</strong>：leetcode 数学tag Medium 难度题解合集<p></p>\n<a id=\"more\"></a>\n<h1 id=\"50-Pow-x-n\"><a href=\"https://leetcode-cn.com/problems/powx-n/\" target=\"_blank\" rel=\"noopener\">50. Pow(x, n)</a></h1>\n<p><a href=\"Math-Medium/image-20200430154015296.png\" title=\"image-20200430154015296\" class=\"gallery-item\"><img src=\"image-20200430154015296.png\" alt=\"image-20200430154015296\"></a></p>\n<h2 id=\"解法一：递归快速幂\">解法一：递归快速幂</h2>\n<p>快速幂本质就是靠不重复计算平方提速的，但是这题有坑点，n必须先转成long long类型，否则会被卡</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    double myPow(double x, int n) {\n        long long l = n;\n        return l &gt; 0 ? fastPow(x, l) : fastPow(1 / x, -l);\n    }\n\n    double fastPow(double x, int n){\n        if(n == 0) return 1;\n        if(n == 1) return x;\n        double half = fastPow(x, n / 2);\n        if(n % 2 == 0)\n            return half * half;\n        else \n            return half * half * x;\n    }\n};\n</code></pre>\n<h2 id=\"解法二：迭代快速幂\">解法二：迭代快速幂</h2>\n<p>卡了半天还是看了答案</p>\n<pre><code class=\"language-cpp\">\n</code></pre>\n</div><script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);\n        }</script>","more":"<h1 id=\"50-Pow-x-n\"><a href=\"https://leetcode-cn.com/problems/powx-n/\" target=\"_blank\" rel=\"noopener\">50. Pow(x, n)</a></h1>\n<p><a href=\"Math-Medium/image-20200430154015296.png\" title=\"image-20200430154015296\" class=\"gallery-item\"><img src=\"image-20200430154015296.png\" alt=\"image-20200430154015296\"></a></p>\n<h2 id=\"解法一：递归快速幂\">解法一：递归快速幂</h2>\n<p>快速幂本质就是靠不重复计算平方提速的，但是这题有坑点，n必须先转成long long类型，否则会被卡</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    double myPow(double x, int n) {\n        long long l = n;\n        return l &gt; 0 ? fastPow(x, l) : fastPow(1 / x, -l);\n    }\n\n    double fastPow(double x, int n){\n        if(n == 0) return 1;\n        if(n == 1) return x;\n        double half = fastPow(x, n / 2);\n        if(n % 2 == 0)\n            return half * half;\n        else \n            return half * half * x;\n    }\n};\n</code></pre>\n<h2 id=\"解法二：迭代快速幂\">解法二：迭代快速幂</h2>\n<p>卡了半天还是看了答案</p>\n<pre><code class=\"language-cpp\">\n</code></pre>\n<script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);\n        }</script>","categories":[{"name":"Algorithm","path":"api/categories/Algorithm.json"}],"tags":[{"name":"Leetcode","path":"api/tags/Leetcode.json"}]}