{"title":"PAT-Advanced Search","slug":"PAT-Advanced-Search","date":"2020-04-17T09:53:21.000Z","updated":"2020-04-21T11:01:40.311Z","comments":true,"path":"api/articles/PAT-Advanced-Search.json","excerpt":"Abstract：Binary Search/ DFS/ BFS","covers":["image-20200417175525427.png"],"content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css\"><div class=\".article-gallery\" <p><strong>Abstract</strong>：Binary Search/ DFS/ BFS<p></p>\n<a id=\"more\"></a>\n<h1 id=\"1010-Radix-25分\"><a href=\"https://pintia.cn/problem-sets/994805342720868352/problems/994805507225665536\" target=\"_blank\" rel=\"noopener\">1010 Radix (25分)</a></h1>\n<p><a href=\"PAT-Advanced-Search/image-20200417175525427.png\" title=\"image-20200417175525427\" class=\"gallery-item\"><img src=\"image-20200417175525427.png\" alt=\"image-20200417175525427\"></a></p>\n<h2 id=\"解法一：二分查找\">解法一：二分查找</h2>\n<p>个人感觉比较难的一题，坑点在于radix并不止于35，比如100zbc，取十位显然可以非常大，需要long long来存</p>\n<p>先将一者确定进制的转换为十进制，二分查找另一个数的进制如何转换，如果大了，说明进制取大了，否则小了</p>\n<pre><code class=\"language-cpp\">#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;cmath&gt;\n#include&lt;cctype&gt;\n\nstd::string n1, n2;\nlong long tag, radix;\n\nlong long toDecimal(std::string&amp; n, long long radix) { // n进制转到十进制\n\tlong long ans = 0, p = 1;\n\tfor (int i = n.length() - 1; i &gt; -1; i--) {\n\t\tans += p * (std::isdigit(n[i]) ? n[i] - '0' : n[i] - 'a' + 10);\n\t\tp *= radix;\n\t}\n\treturn ans;\n}\n\nbool generalEquals(std::string&amp; n1, std::string&amp; n2) {\n\t\n\tchar max = 0;\n\tfor (char&amp; c : n1) max = std::max(c, max);                     // 找到最大的数以确定进制\n\n\tlong long target = toDecimal(n2, radix),\n\t\tlo = (std::isdigit(max) ? max - '0' : max - 'a' + 10) + 1, // char转到long long\n\t\thi = std::max(target, lo),                                 // 最大不超过目标数或lo\n\t\tmid;\n\n\twhile (lo &lt;= hi) {\n\t\tmid = (lo + hi) / 2;\n\t\tlong long decimal = toDecimal(n1, mid);\n\t\tif (decimal == target) {\n\t\t\tradix = mid;\n\t\t\treturn true;\n\t\t}\n\t\telse if (decimal &lt; 0 || decimal &gt; target)\n\t\t\thi = mid - 1;\n\t\telse lo = mid + 1;\n\t}\n\treturn false;\n}\n\nint main() {\n\tstd::cin &gt;&gt; n1 &gt;&gt; n2 &gt;&gt; tag &gt;&gt; radix;\n\tbool e = tag == 1 ? generalEquals(n2, n1) : generalEquals(n1, n2);\n\n\tif (e) std::cout &lt;&lt; radix;\n\telse   std::cout &lt;&lt; &quot;Impossible&quot;;\n}\n</code></pre>\n</div><script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);\n        }</script>","more":"<h1 id=\"1010-Radix-25分\"><a href=\"https://pintia.cn/problem-sets/994805342720868352/problems/994805507225665536\" target=\"_blank\" rel=\"noopener\">1010 Radix (25分)</a></h1>\n<p><a href=\"PAT-Advanced-Search/image-20200417175525427.png\" title=\"image-20200417175525427\" class=\"gallery-item\"><img src=\"image-20200417175525427.png\" alt=\"image-20200417175525427\"></a></p>\n<h2 id=\"解法一：二分查找\">解法一：二分查找</h2>\n<p>个人感觉比较难的一题，坑点在于radix并不止于35，比如100zbc，取十位显然可以非常大，需要long long来存</p>\n<p>先将一者确定进制的转换为十进制，二分查找另一个数的进制如何转换，如果大了，说明进制取大了，否则小了</p>\n<pre><code class=\"language-cpp\">#include&lt;iostream&gt;\n#include&lt;algorithm&gt;\n#include&lt;cmath&gt;\n#include&lt;cctype&gt;\n\nstd::string n1, n2;\nlong long tag, radix;\n\nlong long toDecimal(std::string&amp; n, long long radix) { // n进制转到十进制\n\tlong long ans = 0, p = 1;\n\tfor (int i = n.length() - 1; i &gt; -1; i--) {\n\t\tans += p * (std::isdigit(n[i]) ? n[i] - '0' : n[i] - 'a' + 10);\n\t\tp *= radix;\n\t}\n\treturn ans;\n}\n\nbool generalEquals(std::string&amp; n1, std::string&amp; n2) {\n\t\n\tchar max = 0;\n\tfor (char&amp; c : n1) max = std::max(c, max);                     // 找到最大的数以确定进制\n\n\tlong long target = toDecimal(n2, radix),\n\t\tlo = (std::isdigit(max) ? max - '0' : max - 'a' + 10) + 1, // char转到long long\n\t\thi = std::max(target, lo),                                 // 最大不超过目标数或lo\n\t\tmid;\n\n\twhile (lo &lt;= hi) {\n\t\tmid = (lo + hi) / 2;\n\t\tlong long decimal = toDecimal(n1, mid);\n\t\tif (decimal == target) {\n\t\t\tradix = mid;\n\t\t\treturn true;\n\t\t}\n\t\telse if (decimal &lt; 0 || decimal &gt; target)\n\t\t\thi = mid - 1;\n\t\telse lo = mid + 1;\n\t}\n\treturn false;\n}\n\nint main() {\n\tstd::cin &gt;&gt; n1 &gt;&gt; n2 &gt;&gt; tag &gt;&gt; radix;\n\tbool e = tag == 1 ? generalEquals(n2, n1) : generalEquals(n1, n2);\n\n\tif (e) std::cout &lt;&lt; radix;\n\telse   std::cout &lt;&lt; &quot;Impossible&quot;;\n}\n</code></pre>\n<script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);\n        }</script>","categories":[{"name":"Algorithm","path":"api/categories/Algorithm.json"}],"tags":[{"name":"PAT-A","path":"api/tags/PAT-A.json"}]}