{"title":"DP-Hard","slug":"DP-Hard","date":"2020-05-19T14:18:32.000Z","updated":"2020-05-19T15:38:49.123Z","comments":true,"path":"api/articles/DP-Hard.json","excerpt":"**Abstract：**DP Hard 合集","covers":["image-20200519223108564.png","image-20200519223124843.png"],"content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css\"><div class=\".article-gallery\" <p>**Abstract：**DP Hard 合集<p></p>\n<a id=\"more\"></a>\n<h1 id=\"1449-Form-Largest-Integer-With-Digits-That-Add-up-to-Target\"><a href=\"https://leetcode-cn.com/problems/form-largest-integer-with-digits-that-add-up-to-target/\" target=\"_blank\" rel=\"noopener\">1449. Form Largest Integer With Digits That Add up to Target</a></h1>\n<p><a href=\"DP-Hard/image-20200519223108564.png\" title=\"image-20200519223108564\" class=\"gallery-item\"><img src=\"image-20200519223108564.png\" alt=\"image-20200519223108564\"></a></p>\n<p><a href=\"DP-Hard/image-20200519223124843.png\" title=\"image-20200519223124843\" class=\"gallery-item\"><img src=\"image-20200519223124843.png\" alt=\"image-20200519223124843\"></a></p>\n<h2 id=\"解法一：bottom-up\">解法一：bottom-up</h2>\n<p>由于字符串拼接 $O(target^2)$ ，子问题$O(9 * target)$</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    string largestNumber(vector&lt;int&gt;&amp; cost, int target) {\n        vector&lt;string&gt; dp(target + 1, &quot;0&quot;);\n        dp[0] = &quot;&quot;;\n        for(int i = 1; i &lt;= target; i++) {\n            for(int d = 0; d &lt; 9; d++) {\n                const int t = i - cost[d];\n                if(t &gt;= 0 &amp;&amp; dp[t] != &quot;0&quot; &amp;&amp; dp[t].length() + 1 &gt;= dp[i].length())\n                    dp[i] = to_string(d + 1) + dp[t];\n            }\n        }\n        return dp[target];\n    }\n};\n</code></pre>\n<h2 id=\"解法二：优化字符串拼接\">解法二：优化字符串拼接</h2>\n<p>只记录此时的最优数字和当前长度, $O(9 * target )$</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    string largestNumber(vector&lt;int&gt;&amp; cost, int target) {\n        vector&lt;pair&lt;int, int&gt;&gt; dp(target + 1, { -1, -1 });\n        dp[0] = { 0, 0 };\n        for(int i = 1; i &lt;= target; i++) {\n            for(int d = 0; d &lt; 9; d++) {\n                const int t = i - cost[d];\n                if(t &gt;= 0 &amp;&amp; dp[t].second != -1 &amp;&amp; dp[t].second + 1 &gt;= dp[i].second)\n                    dp[i] = { d + 1, dp[t].second + 1};\n            }\n        }\n        if(dp[target].second == -1) return &quot;0&quot;;\n        string res;\n        while(target) {\n            res += to_string(dp[target].first);\n            target -= cost[dp[target].first - 1];\n        }\n\n        return res;\n    }\n};\n</code></pre>\n</div><script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);\n        }</script>","more":"<h1 id=\"1449-Form-Largest-Integer-With-Digits-That-Add-up-to-Target\"><a href=\"https://leetcode-cn.com/problems/form-largest-integer-with-digits-that-add-up-to-target/\" target=\"_blank\" rel=\"noopener\">1449. Form Largest Integer With Digits That Add up to Target</a></h1>\n<p><a href=\"DP-Hard/image-20200519223108564.png\" title=\"image-20200519223108564\" class=\"gallery-item\"><img src=\"image-20200519223108564.png\" alt=\"image-20200519223108564\"></a></p>\n<p><a href=\"DP-Hard/image-20200519223124843.png\" title=\"image-20200519223124843\" class=\"gallery-item\"><img src=\"image-20200519223124843.png\" alt=\"image-20200519223124843\"></a></p>\n<h2 id=\"解法一：bottom-up\">解法一：bottom-up</h2>\n<p>由于字符串拼接 $O(target^2)$ ，子问题$O(9 * target)$</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    string largestNumber(vector&lt;int&gt;&amp; cost, int target) {\n        vector&lt;string&gt; dp(target + 1, &quot;0&quot;);\n        dp[0] = &quot;&quot;;\n        for(int i = 1; i &lt;= target; i++) {\n            for(int d = 0; d &lt; 9; d++) {\n                const int t = i - cost[d];\n                if(t &gt;= 0 &amp;&amp; dp[t] != &quot;0&quot; &amp;&amp; dp[t].length() + 1 &gt;= dp[i].length())\n                    dp[i] = to_string(d + 1) + dp[t];\n            }\n        }\n        return dp[target];\n    }\n};\n</code></pre>\n<h2 id=\"解法二：优化字符串拼接\">解法二：优化字符串拼接</h2>\n<p>只记录此时的最优数字和当前长度, $O(9 * target )$</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    string largestNumber(vector&lt;int&gt;&amp; cost, int target) {\n        vector&lt;pair&lt;int, int&gt;&gt; dp(target + 1, { -1, -1 });\n        dp[0] = { 0, 0 };\n        for(int i = 1; i &lt;= target; i++) {\n            for(int d = 0; d &lt; 9; d++) {\n                const int t = i - cost[d];\n                if(t &gt;= 0 &amp;&amp; dp[t].second != -1 &amp;&amp; dp[t].second + 1 &gt;= dp[i].second)\n                    dp[i] = { d + 1, dp[t].second + 1};\n            }\n        }\n        if(dp[target].second == -1) return &quot;0&quot;;\n        string res;\n        while(target) {\n            res += to_string(dp[target].first);\n            target -= cost[dp[target].first - 1];\n        }\n\n        return res;\n    }\n};\n</code></pre>\n<script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);\n        }</script>","categories":[{"name":"Algorithm","path":"api/categories/Algorithm.json"}],"tags":[{"name":"Leetcode","path":"api/tags/Leetcode.json"}]}