{"title":"String-Easy","slug":"String-Easy","date":"2020-02-26T15:17:22.000Z","updated":"2020-05-11T13:28:07.517Z","comments":true,"path":"api/articles/String-Easy.json","excerpt":"Abstract： 更新部分Easy难度 string相关题解","covers":["image-20200226235254934.png","image-20200226235312264.png","image-20200226235335075.png","image-20200226235401209.png","image-20200226235519434.png","image-20200509013938628.png","image-20200509031322945.png","image-20200511161840992.png"],"content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css\"><div class=\".article-gallery\" <p><strong>Abstract：</strong> 更新部分<code>Easy</code>难度 <code>string</code>相关题解<p></p>\n<a id=\"more\"></a>\n<h1 id=\"13-Roman-to-Integer\"><a href=\"https://leetcode-cn.com/problems/roman-to-integer/\" target=\"_blank\" rel=\"noopener\">13. Roman to Integer</a></h1>\n<p><a href=\"String-Easy/image-20200226235254934.png\" title=\"image-20200226235254934\" class=\"gallery-item\"><img src=\"image-20200226235254934.png\" alt=\"image-20200226235254934\"></a></p>\n<h2 id=\"解法一：Hash表\">解法一：Hash表</h2>\n<p>优先判定两个字符的值，其他没什么可说的</p>\n<pre><code class=\"language-java\">class Solution {\n    public int romanToInt(String s) {\n        Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;();\n        map.put(&quot;I&quot;, 1);\n        map.put(&quot;IV&quot;, 4);\n        map.put(&quot;V&quot;, 5);\n        map.put(&quot;IX&quot;, 9);\n        map.put(&quot;X&quot;, 10);\n        map.put(&quot;XL&quot;, 40);\n        map.put(&quot;L&quot;, 50);\n        map.put(&quot;XC&quot;, 90);\n        map.put(&quot;C&quot;, 100);\n        map.put(&quot;CD&quot;, 400);\n        map.put(&quot;D&quot;, 500);\n        map.put(&quot;CM&quot;, 900);\n        map.put(&quot;M&quot;, 1000);\n        \n        int ans=0;\n        for(int i=0;i&lt;s.length();i++){\n            if(i+1&lt;s.length() &amp;&amp; map.containsKey(s.substring(i,i+2))){\n                ans+=map.get(s.substring(i,i+2));\n                i++;\n            }\n            else ans+=map.get(s.substring(i,i+1));\n        }\n        return ans;\n    }\n}\n</code></pre>\n<h1 id=\"14-Longest-Common-Prefix\"><a href=\"https://leetcode-cn.com/problems/longest-common-prefix/\" target=\"_blank\" rel=\"noopener\">14. Longest Common Prefix</a></h1>\n<p><a href=\"String-Easy/image-20200226235312264.png\" title=\"image-20200226235312264\" class=\"gallery-item\"><img src=\"image-20200226235312264.png\" alt=\"image-20200226235312264\"></a></p>\n<h2 id=\"解法一：线性扫描（从前往后）\">解法一：线性扫描（从前往后）</h2>\n<pre><code class=\"language-java\">class Solution {\n    public String longestCommonPrefix(String[] strs) {\n        if(strs.length==0 || strs==null){return &quot;&quot;;}\n        String common=&quot;&quot;;\n        int min_len=Integer.MAX_VALUE;\n        for(String s:strs){min_len=Math.min(min_len,s.length());} //先找最小长度min_len\n        for(int curr=0;curr&lt;min_len;curr++){\n            char c=strs[0].charAt(curr); //以第一个为准\n            for(String s:strs){if(s.charAt(curr)!=c)return common;}\n            common+=c;\n        }\n        return common;\n    }\n}\n</code></pre>\n<p><mark><strong>[改进版]</strong></mark></p>\n<ul>\n<li><strong>String</strong> ：改进了String的操作相关，String重载的 <mark>+操作</mark> 相当耗时，因此不使用<strong>字符串拼接</strong>，而是<strong>substring</strong> 的方法</li>\n<li><strong>遍历：</strong> 根本不需要找到最短的字符串，只要遍历时多判断一次是否超出就行了</li>\n<li><strong>效果：</strong> 12ms -&gt;2ms</li>\n</ul>\n<pre><code class=\"language-java\">class Solution {\n    public String longestCommonPrefix(String[] strs) {\n        if(strs.length==0 || strs==null){return &quot;&quot;;}\n        for(int curr=0;curr&lt;strs[0].length();curr++){\n            char c=strs[0].charAt(curr);\n            for(String s:strs){\n                if(s.length()==curr || s.charAt(curr)!=c) //新增s.length()==curr判断一下就行\n                    return strs[0].substring(0,curr); //改为substring,String+操作是相当费时的\n            }\n        }\n        return strs[0];\n    }\n}\n</code></pre>\n<h2 id=\"解法二：线性扫描（从后往前）\">解法二：线性扫描（从后往前）</h2>\n<pre><code class=\"language-java\">public String longestCommonPrefix(String[] strs) {\n   if (strs.length == 0) return &quot;&quot;;\n   String prefix = strs[0];\n   for (int i = 1; i &lt; strs.length; i++)\n       while (strs[i].indexOf(prefix) != 0) { //以第一个为准\n           prefix = prefix.substring(0, prefix.length() - 1); //如果不满足，每次缩小一个字符\n           if (prefix.isEmpty()) return &quot;&quot;; //直到为空\n       }        \n   return prefix;\n}\n</code></pre>\n<h1 id=\"20-Valid-Parentheses\"><a href=\"https://leetcode-cn.com/problems/valid-parentheses/\" target=\"_blank\" rel=\"noopener\">20. Valid Parentheses</a></h1>\n<p><a href=\"String-Easy/image-20200226235335075.png\" title=\"image-20200226235335075\" class=\"gallery-item\"><img src=\"image-20200226235335075.png\" alt=\"image-20200226235335075\"></a></p>\n<h2 id=\"解法一：栈（标准解法）\">解法一：栈（标准解法）</h2>\n<pre><code class=\"language-java\">class Solution {\n    public boolean isValid(String s) {\n        Stack&lt;Character&gt; stack = new Stack&lt;Character&gt;();\n        for(int curr=0;curr&lt;s.length();curr++){\n            char c=s.charAt(curr);\n            if(c=='(' || c=='[' || c=='{') //如果是左括号，压入栈中\n                stack.push(c);\n            else if(c==')'){               //如果是右括号，检查栈是否为空，不为空的话检查是否匹配\n                if(stack.isEmpty() || stack.pop()!='(')return false; //注意isEmpty在前\n            }\n            else if(c==']'){\n                if(stack.isEmpty() || stack.pop()!='[')return false;\n            }\n            else if(c=='}'){\n                if(stack.isEmpty() || stack.pop()!='{')return false;\n            }\n        }\n        return stack.isEmpty();//最后如果栈空则为ture,否则为false\n    }\n}\n</code></pre>\n<h1 id=\"28-Implement-strStr\"><a href=\"https://leetcode-cn.com/problems/implement-strstr/\" target=\"_blank\" rel=\"noopener\">28. Implement strStr()</a></h1>\n<p><a href=\"String-Easy/image-20200226235401209.png\" title=\"image-20200226235401209\" class=\"gallery-item\"><img src=\"image-20200226235401209.png\" alt=\"image-20200226235401209\"></a></p>\n<h2 id=\"解法一：猥琐API法（太脏了，自裁）\">解法一：猥琐API法（<mark>太脏了，自裁</mark>）</h2>\n<pre><code class=\"language-java\">class Solution {\n    public int strStr(String haystack, String needle) {\n        return haystack.indexOf(needle); //这题要实现的就是indexOf的功能\n    }\n}\n</code></pre>\n<h2 id=\"解法二：暴力匹配\">解法二：暴力匹配</h2>\n<pre><code class=\"language-java\">class Solution {\n    public int strStr(String haystack, String needle) {\n        //以下三者均会卡掉for循环，需要特别处理，且equals要第一个判定，否则第二条需要进一步限定\n        if(haystack.equals(needle))return 0;                     //字典等于词\n        if(haystack.length()==0)return -1;                       //字典为空\n        if(needle.length()==0) return 0;                         //词为空\n        \n        //注意curr_hay&lt;haystack.length()-needle.length()+1，必须+1，否则匹配不到最后一位\n        for(int curr_hay=0;curr_hay&lt;haystack.length()-needle.length()+1;curr_hay++){\n            for(int curr_nee=0;curr_nee&lt;needle.length();curr_nee++){\n                if(haystack.charAt(curr_hay+curr_nee)!=needle.charAt(curr_nee))\n                    break;\n                if(curr_nee==needle.length()-1)//匹配到最后一个依然正确，返回此时的curr_hay\n                    return curr_hay;\n            }\n        }\n        return -1; //没找到则返回-1\n    }\n}\n</code></pre>\n<h2 id=\"解法三：KMP（以后再说吧）\">解法三：KMP（<mark>以后再说吧</mark>）</h2>\n<pre><code class=\"language-java\">//问就是不会\n</code></pre>\n<h1 id=\"58-Length-of-Last-Word\"><a href=\"https://leetcode-cn.com/problems/length-of-last-word/\" target=\"_blank\" rel=\"noopener\">58. Length of Last Word</a></h1>\n<p><a href=\"String-Easy/image-20200226235519434.png\" title=\"image-20200226235519434\" class=\"gallery-item\"><img src=\"image-20200226235519434.png\" alt=\"image-20200226235519434\"></a></p>\n<h2 id=\"要点分析\">要点分析</h2>\n<ul>\n<li><strong>特殊情况</strong>：末尾有空格</li>\n<li>如何找到最后一个空格？</li>\n<li>连续空格怎么处理？</li>\n</ul>\n<h2 id=\"解法一：分段切割\">解法一：分段切割</h2>\n<ul>\n<li><strong>缺点</strong>：substring耗时，trim耗时</li>\n</ul>\n<pre><code class=\"language-java\">class Solution {\n    public int lengthOfLastWord(String s) {\n       s=s.trim(); //开局剪切，保证末尾没有空格\n       String res=s;\n       for(int i=0;i&lt;s.length();i++){\n           if(s.charAt(i)==' ')res=s.substring(i+1,s.length()); //每遇到一个空格，把前面的砍掉\n       }\n       return res.length(); //最后的长度即为所求\n    }\n}\n</code></pre>\n<ul>\n<li>改进版，从后往前切割，大大节省时间</li>\n</ul>\n<pre><code class=\"language-java\">class Solution {\n    public int lengthOfLastWord(String s) {\n       s=s.trim(); //开局剪切，保证末尾没有空格\n       String res=s;\n       for(int i=s.length()-1;i&gt;-1;i--){ //从后往前砍\n           if(s.charAt(i)==' '){return s.substring(i+1,s.length());}\n       }\n       return res.length(); //最后的长度即为所求\n    }\n}\n</code></pre>\n<h1 id=\"38-Count-and-Say\"><a href=\"https://leetcode-cn.com/problems/count-and-say/\" target=\"_blank\" rel=\"noopener\">38. Count and Say</a></h1>\n<p><a href=\"String-Easy/image-20200509013938628.png\" title=\"image-20200509013938628\" class=\"gallery-item\"><img src=\"image-20200509013938628.png\" alt=\"image-20200509013938628\"></a></p>\n<h2 id=\"解法一：直接模拟\">解法一：直接模拟</h2>\n<p>就挨着数呗</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    string countAndSay(int n) {\n        if(n == 1) return &quot;1&quot;;\n        return count(n - 1, &quot;1&quot;);\n    }\n\n    string count(int n, string curr) {\n        if(n == 0) return curr;\n        vector&lt;int&gt; res;\n        int cnt = 1, len = curr.length();\n        for(int i = 0; i &lt; len; i++) {\n            if(i + 1 &lt; len &amp;&amp; curr[i] == curr[i + 1])\n                cnt++;\n            else {\n                res.push_back(cnt);\n                res.push_back(curr[i] - '0');\n                cnt = 1;\n            }\n        }\n        curr.clear();\n        for(int i : res)\n            curr += to_string(i);\n        return count(n - 1, curr);\n    }\n};\n</code></pre>\n<h2 id=\"解法二：打表\">解法二：打表</h2>\n<p>纯属半夜无聊</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    string countAndSay(int n) {\n        return findFromTable(n);\n    }\n\n    string findFromTable(int n) {\n        if (n == 1) return &quot;1&quot;;\n        if (n == 2) return &quot;11&quot;;\n        if (n == 3) return &quot;21&quot;;\n        if (n == 4) return &quot;1211&quot;;\n        if (n == 5) return &quot;111221&quot;;\n        if (n == 6) return &quot;312211&quot;;\n        if (n == 7) return &quot;13112221&quot;;\n        if (n == 8) return &quot;1113213211&quot;;\n        if (n == 9) return &quot;31131211131221&quot;;\n        if (n == 10) return &quot;13211311123113112211&quot;;\n        if (n == 11) return &quot;11131221133112132113212221&quot;;\n        if (n == 12) return &quot;3113112221232112111312211312113211&quot;;\n        if (n == 13) return &quot;1321132132111213122112311311222113111221131221&quot;;\n        if (n == 14) return &quot;11131221131211131231121113112221121321132132211331222113112211&quot;;\n        if (n == 15) return &quot;311311222113111231131112132112311321322112111312211312111322212311322113212221&quot;;\n        if (n == 16) return &quot;132113213221133112132113311211131221121321131211132221123113112221131112311332111213211322211312113211&quot;;\n        if (n == 17) return &quot;11131221131211132221232112111312212321123113112221121113122113111231133221121321132132211331121321231231121113122113322113111221131221&quot;;\n        if (n == 18) return &quot;31131122211311123113321112131221123113112211121312211213211321322112311311222113311213212322211211131221131211132221232112111312111213111213211231131122212322211331222113112211&quot;;\n        if (n == 19) return &quot;1321132132211331121321231231121113112221121321132122311211131122211211131221131211132221121321132132212321121113121112133221123113112221131112311332111213122112311311123112111331121113122112132113213211121332212311322113212221&quot;;\n        if (n == 20) return &quot;11131221131211132221232112111312111213111213211231132132211211131221131211221321123113213221123113112221131112311332211211131221131211132211121312211231131112311211232221121321132132211331121321231231121113112221121321133112132112312321123113112221121113122113121113123112112322111213211322211312113211&quot;;\n        if (n == 21) return &quot;311311222113111231133211121312211231131112311211133112111312211213211312111322211231131122211311122122111312211213211312111322211213211321322113311213212322211231131122211311123113223112111311222112132113311213211221121332211211131221131211132221232112111312111213111213211231132132211211131221232112111312211213111213122112132113213221123113112221131112311311121321122112132231121113122113322113111221131221&quot;;\n        if (n == 22) return &quot;132113213221133112132123123112111311222112132113311213211231232112311311222112111312211311123113322112132113213221133122112231131122211211131221131112311332211211131221131211132221232112111312111213322112132113213221133112132113221321123113213221121113122123211211131221222112112322211231131122211311123113321112131221123113111231121113311211131221121321131211132221123113112211121312211231131122211211133112111311222112111312211312111322211213211321322113311213211331121113122122211211132213211231131122212322211331222113112211&quot;;\n        if (n == 23) return &quotquot;;\n        if (n == 24) return &quotquot;;\n        if (n == 25) return &quot;132113213221133112132123123112111311222112132113311213211231232112311311222112111312211311123113322112132113212231121113112221121321132132211231232112311321322112311311222113111231133221121113122113121113221112131221123113111231121123222112132113213221133112132123123112111312111312212231131122211311123113322112111312211312111322111213122112311311123112112322211211131221131211132221232112111312111213111213211231132132211211131221232112111312212221121123222112132113213221133112132123123112111311222112132113213221132213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121132211332113221122112133221123113112221131112311332111213122112311311123112111331121113122112132113121113222112311311221112131221123113112221121113311211131122211211131221131211132221121321132132212321121113121112133221123113112221131112212211131221121321131211132221123113112221131112311332211211133112111311222112111312211311123113322112111312211312111322212321121113121112133221121321132132211331121321231231121113112221121321132122311211131122211211131221131211322113322112111312211322132113213221123113112221131112311311121321122112132231121113122113322113111221131221&quot;;\n        if (n == 26) return &quotquot;;\n        if (n == 27) return &quotquot;;\n        if (n == 28) return &quotquot;;\n        if (n == 29) return &quotquot;;\n        if (n == 30) return &quotquot;;\n    return &quot;No ans!&quot;;\n    }\n};\n</code></pre>\n<h1 id=\"67-Add-Binary\"><a href=\"https://leetcode-cn.com/problems/add-binary/\" target=\"_blank\" rel=\"noopener\">67. Add Binary</a></h1>\n<p><a href=\"String-Easy/image-20200509031322945.png\" title=\"image-20200509031322945\" class=\"gallery-item\"><img src=\"image-20200509031322945.png\" alt=\"image-20200509031322945\"></a></p>\n<h2 id=\"解法一：模拟\">解法一：模拟</h2>\n<p>模拟加法，不用多说了吧</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    string addBinary(string a, string b) {\n        int len1 = a.length(), len2 = b.length();\n        if(len1 &lt; len2) addZero(a, len2 - len1);\n        else if(len2 &lt; len1) addZero(b, len1 - len2);\n        int carry = 0, len = std::max(len1, len2);\n        for(int i = len - 1; i &gt; -1; i--) {\n            int val = a[i] + b[i] - 2 * '0' + carry;\n            carry = val / 2;\n            val %= 2;\n            a[i] = val + '0';\n        }\n        if(carry == 1) a = '1' + a;\n        return a;\n    }\n\n    void addZero(string&amp; s, int len) {\n        for(int i = 0; i &lt; len; i++)\n            s = '0' + s;\n    }\n};\n</code></pre>\n<h1 id=\"290-Word-Pattern\"><a href=\"https://leetcode-cn.com/problems/word-pattern/\" target=\"_blank\" rel=\"noopener\">290. Word Pattern</a></h1>\n<p><a href=\"String-Easy/image-20200511161840992.png\" title=\"image-20200511161840992\" class=\"gallery-item\"><img src=\"image-20200511161840992.png\" alt=\"image-20200511161840992\"></a></p>\n<h2 id=\"解法一：单哈希\">解法一：单哈希</h2>\n<p>写的很乱</p>\n<ul>\n<li>先分割string</li>\n<li>记录pattern对应的索引</li>\n<li>对比vector中每个元素是否等于模式串所指的位置元素</li>\n<li>还要判断一下模式串之间是否不同，即a所指的和b所指的必须不同（逻辑上其实也可以认为相同，但是这题认为是不同的）</li>\n</ul>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    bool wordPattern(string pattern, string str) {\n        vector&lt;string&gt; v = split(str);\n        if(pattern.length() != v.size()) return false;\n\n        unordered_map&lt;char, int&gt; map;\n        for(int i = 0; i &lt; pattern.length(); i++) {\n            if(map.find(pattern[i]) == map.end()) \n                map[pattern[i]] = i;\n            if(v[map[pattern[i]]] != v[i]) return false;\n        }\n\n        string s = &quot;&quot;;\n        for(auto k : map) {\n            int idx = k.second;\n            string ns = v[idx];\n            if(ns == s) return false;\n            s = ns;\n        }\n\n        return true;\n    }\n\n    vector&lt;string&gt; split(string str) {\n        vector&lt;string&gt; v;\n        string tmp = &quot;&quot;;\n        for(int i = 0; i &lt; str.length(); i++) {\n            if(str[i] == ' ') {\n                if(tmp.empty()) {\n                    continue;\n                }\n                else {\n                    v.push_back(tmp);\n                    tmp.clear();\n                }\n            }\n            else tmp += str[i];\n            if(i == str.length() - 1 &amp;&amp; !tmp.empty()) v.push_back(tmp); \n        }\n        return v;\n    }\n};\n</code></pre>\n<p><strong>分割字符串的简单写法</strong></p>\n<pre><code class=\"language-cpp\">vector&lt;string&gt; split(string str) {\n    vector&lt;string&gt; v;\n    istringstream ss(str);\n    string s;\n    while(ss &gt;&gt; s) v.push_back(s);\n    return v;\n}\n</code></pre>\n<h2 id=\"解法二：双哈希\">解法二：双哈希</h2>\n<p>看了评论发现大家都是双哈希的。。的确简单不少</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    bool wordPattern(string pattern, string str) {\n        unordered_map&lt;char, int&gt; cmap;\n        unordered_map&lt;string, int&gt; smap;\n        vector&lt;string&gt; v = split(str);\n        if(pattern.length() != v.size()) return false;\n        for(int i = 0; i &lt; v.size(); i++) {\n            if(smap[v[i]] != cmap[pattern[i]])  return false;\n            else\n                smap[v[i]] = cmap[pattern[i]] = i + 1;\n        }\n        return true;\n    }\n\n    vector&lt;string&gt; split(string str) {\n        vector&lt;string&gt; v;\n        istringstream ss(str);\n        string s;\n        while(ss &gt;&gt; s) v.push_back(s);\n        return v;\n    }\n};\n</code></pre>\n</div><script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);\n        }</script>","more":"<h1 id=\"13-Roman-to-Integer\"><a href=\"https://leetcode-cn.com/problems/roman-to-integer/\" target=\"_blank\" rel=\"noopener\">13. Roman to Integer</a></h1>\n<p><a href=\"String-Easy/image-20200226235254934.png\" title=\"image-20200226235254934\" class=\"gallery-item\"><img src=\"image-20200226235254934.png\" alt=\"image-20200226235254934\"></a></p>\n<h2 id=\"解法一：Hash表\">解法一：Hash表</h2>\n<p>优先判定两个字符的值，其他没什么可说的</p>\n<pre><code class=\"language-java\">class Solution {\n    public int romanToInt(String s) {\n        Map&lt;String, Integer&gt; map = new HashMap&lt;&gt;();\n        map.put(&quot;I&quot;, 1);\n        map.put(&quot;IV&quot;, 4);\n        map.put(&quot;V&quot;, 5);\n        map.put(&quot;IX&quot;, 9);\n        map.put(&quot;X&quot;, 10);\n        map.put(&quot;XL&quot;, 40);\n        map.put(&quot;L&quot;, 50);\n        map.put(&quot;XC&quot;, 90);\n        map.put(&quot;C&quot;, 100);\n        map.put(&quot;CD&quot;, 400);\n        map.put(&quot;D&quot;, 500);\n        map.put(&quot;CM&quot;, 900);\n        map.put(&quot;M&quot;, 1000);\n        \n        int ans=0;\n        for(int i=0;i&lt;s.length();i++){\n            if(i+1&lt;s.length() &amp;&amp; map.containsKey(s.substring(i,i+2))){\n                ans+=map.get(s.substring(i,i+2));\n                i++;\n            }\n            else ans+=map.get(s.substring(i,i+1));\n        }\n        return ans;\n    }\n}\n</code></pre>\n<h1 id=\"14-Longest-Common-Prefix\"><a href=\"https://leetcode-cn.com/problems/longest-common-prefix/\" target=\"_blank\" rel=\"noopener\">14. Longest Common Prefix</a></h1>\n<p><a href=\"String-Easy/image-20200226235312264.png\" title=\"image-20200226235312264\" class=\"gallery-item\"><img src=\"image-20200226235312264.png\" alt=\"image-20200226235312264\"></a></p>\n<h2 id=\"解法一：线性扫描（从前往后）\">解法一：线性扫描（从前往后）</h2>\n<pre><code class=\"language-java\">class Solution {\n    public String longestCommonPrefix(String[] strs) {\n        if(strs.length==0 || strs==null){return &quot;&quot;;}\n        String common=&quot;&quot;;\n        int min_len=Integer.MAX_VALUE;\n        for(String s:strs){min_len=Math.min(min_len,s.length());} //先找最小长度min_len\n        for(int curr=0;curr&lt;min_len;curr++){\n            char c=strs[0].charAt(curr); //以第一个为准\n            for(String s:strs){if(s.charAt(curr)!=c)return common;}\n            common+=c;\n        }\n        return common;\n    }\n}\n</code></pre>\n<p><mark><strong>[改进版]</strong></mark></p>\n<ul>\n<li><strong>String</strong> ：改进了String的操作相关，String重载的 <mark>+操作</mark> 相当耗时，因此不使用<strong>字符串拼接</strong>，而是<strong>substring</strong> 的方法</li>\n<li><strong>遍历：</strong> 根本不需要找到最短的字符串，只要遍历时多判断一次是否超出就行了</li>\n<li><strong>效果：</strong> 12ms -&gt;2ms</li>\n</ul>\n<pre><code class=\"language-java\">class Solution {\n    public String longestCommonPrefix(String[] strs) {\n        if(strs.length==0 || strs==null){return &quot;&quot;;}\n        for(int curr=0;curr&lt;strs[0].length();curr++){\n            char c=strs[0].charAt(curr);\n            for(String s:strs){\n                if(s.length()==curr || s.charAt(curr)!=c) //新增s.length()==curr判断一下就行\n                    return strs[0].substring(0,curr); //改为substring,String+操作是相当费时的\n            }\n        }\n        return strs[0];\n    }\n}\n</code></pre>\n<h2 id=\"解法二：线性扫描（从后往前）\">解法二：线性扫描（从后往前）</h2>\n<pre><code class=\"language-java\">public String longestCommonPrefix(String[] strs) {\n   if (strs.length == 0) return &quot;&quot;;\n   String prefix = strs[0];\n   for (int i = 1; i &lt; strs.length; i++)\n       while (strs[i].indexOf(prefix) != 0) { //以第一个为准\n           prefix = prefix.substring(0, prefix.length() - 1); //如果不满足，每次缩小一个字符\n           if (prefix.isEmpty()) return &quot;&quot;; //直到为空\n       }        \n   return prefix;\n}\n</code></pre>\n<h1 id=\"20-Valid-Parentheses\"><a href=\"https://leetcode-cn.com/problems/valid-parentheses/\" target=\"_blank\" rel=\"noopener\">20. Valid Parentheses</a></h1>\n<p><a href=\"String-Easy/image-20200226235335075.png\" title=\"image-20200226235335075\" class=\"gallery-item\"><img src=\"image-20200226235335075.png\" alt=\"image-20200226235335075\"></a></p>\n<h2 id=\"解法一：栈（标准解法）\">解法一：栈（标准解法）</h2>\n<pre><code class=\"language-java\">class Solution {\n    public boolean isValid(String s) {\n        Stack&lt;Character&gt; stack = new Stack&lt;Character&gt;();\n        for(int curr=0;curr&lt;s.length();curr++){\n            char c=s.charAt(curr);\n            if(c=='(' || c=='[' || c=='{') //如果是左括号，压入栈中\n                stack.push(c);\n            else if(c==')'){               //如果是右括号，检查栈是否为空，不为空的话检查是否匹配\n                if(stack.isEmpty() || stack.pop()!='(')return false; //注意isEmpty在前\n            }\n            else if(c==']'){\n                if(stack.isEmpty() || stack.pop()!='[')return false;\n            }\n            else if(c=='}'){\n                if(stack.isEmpty() || stack.pop()!='{')return false;\n            }\n        }\n        return stack.isEmpty();//最后如果栈空则为ture,否则为false\n    }\n}\n</code></pre>\n<h1 id=\"28-Implement-strStr\"><a href=\"https://leetcode-cn.com/problems/implement-strstr/\" target=\"_blank\" rel=\"noopener\">28. Implement strStr()</a></h1>\n<p><a href=\"String-Easy/image-20200226235401209.png\" title=\"image-20200226235401209\" class=\"gallery-item\"><img src=\"image-20200226235401209.png\" alt=\"image-20200226235401209\"></a></p>\n<h2 id=\"解法一：猥琐API法（太脏了，自裁）\">解法一：猥琐API法（<mark>太脏了，自裁</mark>）</h2>\n<pre><code class=\"language-java\">class Solution {\n    public int strStr(String haystack, String needle) {\n        return haystack.indexOf(needle); //这题要实现的就是indexOf的功能\n    }\n}\n</code></pre>\n<h2 id=\"解法二：暴力匹配\">解法二：暴力匹配</h2>\n<pre><code class=\"language-java\">class Solution {\n    public int strStr(String haystack, String needle) {\n        //以下三者均会卡掉for循环，需要特别处理，且equals要第一个判定，否则第二条需要进一步限定\n        if(haystack.equals(needle))return 0;                     //字典等于词\n        if(haystack.length()==0)return -1;                       //字典为空\n        if(needle.length()==0) return 0;                         //词为空\n        \n        //注意curr_hay&lt;haystack.length()-needle.length()+1，必须+1，否则匹配不到最后一位\n        for(int curr_hay=0;curr_hay&lt;haystack.length()-needle.length()+1;curr_hay++){\n            for(int curr_nee=0;curr_nee&lt;needle.length();curr_nee++){\n                if(haystack.charAt(curr_hay+curr_nee)!=needle.charAt(curr_nee))\n                    break;\n                if(curr_nee==needle.length()-1)//匹配到最后一个依然正确，返回此时的curr_hay\n                    return curr_hay;\n            }\n        }\n        return -1; //没找到则返回-1\n    }\n}\n</code></pre>\n<h2 id=\"解法三：KMP（以后再说吧）\">解法三：KMP（<mark>以后再说吧</mark>）</h2>\n<pre><code class=\"language-java\">//问就是不会\n</code></pre>\n<h1 id=\"58-Length-of-Last-Word\"><a href=\"https://leetcode-cn.com/problems/length-of-last-word/\" target=\"_blank\" rel=\"noopener\">58. Length of Last Word</a></h1>\n<p><a href=\"String-Easy/image-20200226235519434.png\" title=\"image-20200226235519434\" class=\"gallery-item\"><img src=\"image-20200226235519434.png\" alt=\"image-20200226235519434\"></a></p>\n<h2 id=\"要点分析\">要点分析</h2>\n<ul>\n<li><strong>特殊情况</strong>：末尾有空格</li>\n<li>如何找到最后一个空格？</li>\n<li>连续空格怎么处理？</li>\n</ul>\n<h2 id=\"解法一：分段切割\">解法一：分段切割</h2>\n<ul>\n<li><strong>缺点</strong>：substring耗时，trim耗时</li>\n</ul>\n<pre><code class=\"language-java\">class Solution {\n    public int lengthOfLastWord(String s) {\n       s=s.trim(); //开局剪切，保证末尾没有空格\n       String res=s;\n       for(int i=0;i&lt;s.length();i++){\n           if(s.charAt(i)==' ')res=s.substring(i+1,s.length()); //每遇到一个空格，把前面的砍掉\n       }\n       return res.length(); //最后的长度即为所求\n    }\n}\n</code></pre>\n<ul>\n<li>改进版，从后往前切割，大大节省时间</li>\n</ul>\n<pre><code class=\"language-java\">class Solution {\n    public int lengthOfLastWord(String s) {\n       s=s.trim(); //开局剪切，保证末尾没有空格\n       String res=s;\n       for(int i=s.length()-1;i&gt;-1;i--){ //从后往前砍\n           if(s.charAt(i)==' '){return s.substring(i+1,s.length());}\n       }\n       return res.length(); //最后的长度即为所求\n    }\n}\n</code></pre>\n<h1 id=\"38-Count-and-Say\"><a href=\"https://leetcode-cn.com/problems/count-and-say/\" target=\"_blank\" rel=\"noopener\">38. Count and Say</a></h1>\n<p><a href=\"String-Easy/image-20200509013938628.png\" title=\"image-20200509013938628\" class=\"gallery-item\"><img src=\"image-20200509013938628.png\" alt=\"image-20200509013938628\"></a></p>\n<h2 id=\"解法一：直接模拟\">解法一：直接模拟</h2>\n<p>就挨着数呗</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    string countAndSay(int n) {\n        if(n == 1) return &quot;1&quot;;\n        return count(n - 1, &quot;1&quot;);\n    }\n\n    string count(int n, string curr) {\n        if(n == 0) return curr;\n        vector&lt;int&gt; res;\n        int cnt = 1, len = curr.length();\n        for(int i = 0; i &lt; len; i++) {\n            if(i + 1 &lt; len &amp;&amp; curr[i] == curr[i + 1])\n                cnt++;\n            else {\n                res.push_back(cnt);\n                res.push_back(curr[i] - '0');\n                cnt = 1;\n            }\n        }\n        curr.clear();\n        for(int i : res)\n            curr += to_string(i);\n        return count(n - 1, curr);\n    }\n};\n</code></pre>\n<h2 id=\"解法二：打表\">解法二：打表</h2>\n<p>纯属半夜无聊</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    string countAndSay(int n) {\n        return findFromTable(n);\n    }\n\n    string findFromTable(int n) {\n        if (n == 1) return &quot;1&quot;;\n        if (n == 2) return &quot;11&quot;;\n        if (n == 3) return &quot;21&quot;;\n        if (n == 4) return &quot;1211&quot;;\n        if (n == 5) return &quot;111221&quot;;\n        if (n == 6) return &quot;312211&quot;;\n        if (n == 7) return &quot;13112221&quot;;\n        if (n == 8) return &quot;1113213211&quot;;\n        if (n == 9) return &quot;31131211131221&quot;;\n        if (n == 10) return &quot;13211311123113112211&quot;;\n        if (n == 11) return &quot;11131221133112132113212221&quot;;\n        if (n == 12) return &quot;3113112221232112111312211312113211&quot;;\n        if (n == 13) return &quot;1321132132111213122112311311222113111221131221&quot;;\n        if (n == 14) return &quot;11131221131211131231121113112221121321132132211331222113112211&quot;;\n        if (n == 15) return &quot;311311222113111231131112132112311321322112111312211312111322212311322113212221&quot;;\n        if (n == 16) return &quot;132113213221133112132113311211131221121321131211132221123113112221131112311332111213211322211312113211&quot;;\n        if (n == 17) return &quot;11131221131211132221232112111312212321123113112221121113122113111231133221121321132132211331121321231231121113122113322113111221131221&quot;;\n        if (n == 18) return &quot;31131122211311123113321112131221123113112211121312211213211321322112311311222113311213212322211211131221131211132221232112111312111213111213211231131122212322211331222113112211&quot;;\n        if (n == 19) return &quot;1321132132211331121321231231121113112221121321132122311211131122211211131221131211132221121321132132212321121113121112133221123113112221131112311332111213122112311311123112111331121113122112132113213211121332212311322113212221&quot;;\n        if (n == 20) return &quot;11131221131211132221232112111312111213111213211231132132211211131221131211221321123113213221123113112221131112311332211211131221131211132211121312211231131112311211232221121321132132211331121321231231121113112221121321133112132112312321123113112221121113122113121113123112112322111213211322211312113211&quot;;\n        if (n == 21) return &quot;311311222113111231133211121312211231131112311211133112111312211213211312111322211231131122211311122122111312211213211312111322211213211321322113311213212322211231131122211311123113223112111311222112132113311213211221121332211211131221131211132221232112111312111213111213211231132132211211131221232112111312211213111213122112132113213221123113112221131112311311121321122112132231121113122113322113111221131221&quot;;\n        if (n == 22) return &quotquot;;\n        if (n == 23) return &quotquot;;\n        if (n == 24) return &quotquot;;\n        if (n == 25) return &quot;132113213221133112132123123112111311222112132113311213211231232112311311222112111312211311123113322112132113212231121113112221121321132132211231232112311321322112311311222113111231133221121113122113121113221112131221123113111231121123222112132113213221133112132123123112111312111312212231131122211311123113322112111312211312111322111213122112311311123112112322211211131221131211132221232112111312111213111213211231132132211211131221232112111312212221121123222112132113213221133112132123123112111311222112132113213221132213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121132211332113221122112133221123113112221131112311332111213122112311311123112111331121113122112132113121113222112311311221112131221123113112221121113311211131122211211131221131211132221121321132132212321121113121112133221123113112221131112212211131221121321131211132221123113112221131112311332211211133112111311222112111312211311123113322112111312211312111322212321121113121112133221121321132132211331121321231231121113112221121321132122311211131122211211131221131211322113322112111312211322132113213221123113112221131112311311121321122112132231121113122113322113111221131221&quot;;\n        if (n == 26) return &quotquot;;\n        if (n == 27) return &quotquot;;\n        if (n == 28) return &quotquot;;\n        if (n == 29) return &quotquot;;\n        if (n == 30) return &quotquot;;\n    return &quot;No ans!&quot;;\n    }\n};\n</code></pre>\n<h1 id=\"67-Add-Binary\"><a href=\"https://leetcode-cn.com/problems/add-binary/\" target=\"_blank\" rel=\"noopener\">67. Add Binary</a></h1>\n<p><a href=\"String-Easy/image-20200509031322945.png\" title=\"image-20200509031322945\" class=\"gallery-item\"><img src=\"image-20200509031322945.png\" alt=\"image-20200509031322945\"></a></p>\n<h2 id=\"解法一：模拟\">解法一：模拟</h2>\n<p>模拟加法，不用多说了吧</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    string addBinary(string a, string b) {\n        int len1 = a.length(), len2 = b.length();\n        if(len1 &lt; len2) addZero(a, len2 - len1);\n        else if(len2 &lt; len1) addZero(b, len1 - len2);\n        int carry = 0, len = std::max(len1, len2);\n        for(int i = len - 1; i &gt; -1; i--) {\n            int val = a[i] + b[i] - 2 * '0' + carry;\n            carry = val / 2;\n            val %= 2;\n            a[i] = val + '0';\n        }\n        if(carry == 1) a = '1' + a;\n        return a;\n    }\n\n    void addZero(string&amp; s, int len) {\n        for(int i = 0; i &lt; len; i++)\n            s = '0' + s;\n    }\n};\n</code></pre>\n<h1 id=\"290-Word-Pattern\"><a href=\"https://leetcode-cn.com/problems/word-pattern/\" target=\"_blank\" rel=\"noopener\">290. Word Pattern</a></h1>\n<p><a href=\"String-Easy/image-20200511161840992.png\" title=\"image-20200511161840992\" class=\"gallery-item\"><img src=\"image-20200511161840992.png\" alt=\"image-20200511161840992\"></a></p>\n<h2 id=\"解法一：单哈希\">解法一：单哈希</h2>\n<p>写的很乱</p>\n<ul>\n<li>先分割string</li>\n<li>记录pattern对应的索引</li>\n<li>对比vector中每个元素是否等于模式串所指的位置元素</li>\n<li>还要判断一下模式串之间是否不同，即a所指的和b所指的必须不同（逻辑上其实也可以认为相同，但是这题认为是不同的）</li>\n</ul>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    bool wordPattern(string pattern, string str) {\n        vector&lt;string&gt; v = split(str);\n        if(pattern.length() != v.size()) return false;\n\n        unordered_map&lt;char, int&gt; map;\n        for(int i = 0; i &lt; pattern.length(); i++) {\n            if(map.find(pattern[i]) == map.end()) \n                map[pattern[i]] = i;\n            if(v[map[pattern[i]]] != v[i]) return false;\n        }\n\n        string s = &quot;&quot;;\n        for(auto k : map) {\n            int idx = k.second;\n            string ns = v[idx];\n            if(ns == s) return false;\n            s = ns;\n        }\n\n        return true;\n    }\n\n    vector&lt;string&gt; split(string str) {\n        vector&lt;string&gt; v;\n        string tmp = &quot;&quot;;\n        for(int i = 0; i &lt; str.length(); i++) {\n            if(str[i] == ' ') {\n                if(tmp.empty()) {\n                    continue;\n                }\n                else {\n                    v.push_back(tmp);\n                    tmp.clear();\n                }\n            }\n            else tmp += str[i];\n            if(i == str.length() - 1 &amp;&amp; !tmp.empty()) v.push_back(tmp); \n        }\n        return v;\n    }\n};\n</code></pre>\n<p><strong>分割字符串的简单写法</strong></p>\n<pre><code class=\"language-cpp\">vector&lt;string&gt; split(string str) {\n    vector&lt;string&gt; v;\n    istringstream ss(str);\n    string s;\n    while(ss &gt;&gt; s) v.push_back(s);\n    return v;\n}\n</code></pre>\n<h2 id=\"解法二：双哈希\">解法二：双哈希</h2>\n<p>看了评论发现大家都是双哈希的。。的确简单不少</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    bool wordPattern(string pattern, string str) {\n        unordered_map&lt;char, int&gt; cmap;\n        unordered_map&lt;string, int&gt; smap;\n        vector&lt;string&gt; v = split(str);\n        if(pattern.length() != v.size()) return false;\n        for(int i = 0; i &lt; v.size(); i++) {\n            if(smap[v[i]] != cmap[pattern[i]])  return false;\n            else\n                smap[v[i]] = cmap[pattern[i]] = i + 1;\n        }\n        return true;\n    }\n\n    vector&lt;string&gt; split(string str) {\n        vector&lt;string&gt; v;\n        istringstream ss(str);\n        string s;\n        while(ss &gt;&gt; s) v.push_back(s);\n        return v;\n    }\n};\n</code></pre>\n<script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);\n        }</script>","categories":[{"name":"Algorithm","path":"api/categories/Algorithm.json"}],"tags":[{"name":"leetcode","path":"api/tags/leetcode.json"}]}