{"title":"Search-Hard","slug":"Search-Hard","date":"2020-05-27T05:26:43.000Z","updated":"2020-09-19T01:28:15.946Z","comments":true,"path":"api/articles/Search-Hard.json","excerpt":"Abstract： 搜索 Hard 合集","covers":["image-20200527132825703.png"],"content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css\"><div class=\".article-gallery\" <p><strong>Abstract：</strong> 搜索 Hard 合集<p></p>\n<a id=\"more\"></a>\n<h1 id=\"51-N-Queens\"><a href=\"https://leetcode-cn.com/problems/n-queens/\" target=\"_blank\" rel=\"noopener\">51. N-Queens</a></h1>\n<p><a href=\"Search-Hard/image-20200527132825703.png\" title=\"image-20200527132825703\" class=\"gallery-item\"><img src=\"image-20200527132825703.png\" alt=\"image-20200527132825703\"></a></p>\n<h2 id=\"解法一：dfs回溯\">解法一：dfs回溯</h2>\n<p>标准回溯法</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    vector&lt;vector&lt;string&gt;&gt; solveNQueens(int n) {\n        string s;\n        for(int i = 0; i &lt; n; ++i) s += '.';\n        vector&lt;string&gt; board(n, s);\n        vector&lt;vector&lt;string&gt;&gt; res;\n        dfs(board, 0, res);\n        return res;\n    }\n\n    void dfs(vector&lt;string&gt;&amp; board, int row, vector&lt;vector&lt;string&gt;&gt;&amp; res) {\n        if(row &gt;= board.size()) {\n            res.push_back(board);\n            return;\n        }\n        for(int i = 0; i &lt; board[row].size(); ++i) {\n            if(isValid(board, row, i)) {\n                board[row][i] = 'Q';\n                dfs(board, row + 1, res);\n                board[row][i] = '.';\n            }\n        } \n            \n    }\n\n    bool isValid(const vector&lt;string&gt;&amp; board, int r, int c) {\n        int row = board.size(), col = board[0].size();\n        for(int i = 1; i &lt;= r; ++i) {\n            if(c - i &gt; -1 &amp;&amp; board[r][c - i] == 'Q') return false;\n            if(r - i &gt; -1 &amp;&amp; board[r - i][c] == 'Q') return false;\n            if(c - i &gt; -1 &amp;&amp; r - i &gt; -1 &amp;&amp; board[r - i][c - i] == 'Q') return false;\n            if(c + i &lt; col &amp;&amp; r - i &gt; -1 &amp;&amp; board[r - i][c + i] == 'Q') return false;\n        }\n        return true;\n    }\n};\n</code></pre>\n<h2 id=\"解法二：状压优化\">解法二：状压优化</h2>\n<p>前提是n小于等于32，当然如果用long long 的话可以到64</p>\n<pre><code class=\"language-cpp\">\n</code></pre>\n</div><script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);\n        }</script>","more":"<h1 id=\"51-N-Queens\"><a href=\"https://leetcode-cn.com/problems/n-queens/\" target=\"_blank\" rel=\"noopener\">51. N-Queens</a></h1>\n<p><a href=\"Search-Hard/image-20200527132825703.png\" title=\"image-20200527132825703\" class=\"gallery-item\"><img src=\"image-20200527132825703.png\" alt=\"image-20200527132825703\"></a></p>\n<h2 id=\"解法一：dfs回溯\">解法一：dfs回溯</h2>\n<p>标准回溯法</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    vector&lt;vector&lt;string&gt;&gt; solveNQueens(int n) {\n        string s;\n        for(int i = 0; i &lt; n; ++i) s += '.';\n        vector&lt;string&gt; board(n, s);\n        vector&lt;vector&lt;string&gt;&gt; res;\n        dfs(board, 0, res);\n        return res;\n    }\n\n    void dfs(vector&lt;string&gt;&amp; board, int row, vector&lt;vector&lt;string&gt;&gt;&amp; res) {\n        if(row &gt;= board.size()) {\n            res.push_back(board);\n            return;\n        }\n        for(int i = 0; i &lt; board[row].size(); ++i) {\n            if(isValid(board, row, i)) {\n                board[row][i] = 'Q';\n                dfs(board, row + 1, res);\n                board[row][i] = '.';\n            }\n        } \n            \n    }\n\n    bool isValid(const vector&lt;string&gt;&amp; board, int r, int c) {\n        int row = board.size(), col = board[0].size();\n        for(int i = 1; i &lt;= r; ++i) {\n            if(c - i &gt; -1 &amp;&amp; board[r][c - i] == 'Q') return false;\n            if(r - i &gt; -1 &amp;&amp; board[r - i][c] == 'Q') return false;\n            if(c - i &gt; -1 &amp;&amp; r - i &gt; -1 &amp;&amp; board[r - i][c - i] == 'Q') return false;\n            if(c + i &lt; col &amp;&amp; r - i &gt; -1 &amp;&amp; board[r - i][c + i] == 'Q') return false;\n        }\n        return true;\n    }\n};\n</code></pre>\n<h2 id=\"解法二：状压优化\">解法二：状压优化</h2>\n<p>前提是n小于等于32，当然如果用long long 的话可以到64</p>\n<pre><code class=\"language-cpp\">\n</code></pre>\n<script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);\n        }</script>","categories":[{"name":"Algorithm","path":"api/categories/Algorithm.json"}],"tags":[{"name":"-Leetcode","path":"api/tags/-Leetcode.json"}]}