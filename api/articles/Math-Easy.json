{"title":"Math-Easy","slug":"Math-Easy","date":"2020-04-30T05:53:50.000Z","updated":"2020-04-30T06:08:24.749Z","comments":true,"path":"api/articles/Math-Easy.json","excerpt":"Abstract：数论相关，说是数论其实也不是数论，简单逻辑判断而已","covers":["image-20200430135554111.png"],"content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css\"><div class=\".article-gallery\" <p><strong>Abstract</strong>：数论相关，说是数论其实也不是数论，简单逻辑判断而已<p></p>\n<a id=\"more\"></a>\n<h1 id=\"202-Happy-Number\"><a href=\"https://leetcode-cn.com/problems/happy-number/\" target=\"_blank\" rel=\"noopener\">202. Happy Number</a></h1>\n<p><a href=\"Math-Easy/image-20200430135554111.png\" title=\"image-20200430135554111\" class=\"gallery-item\"><img src=\"image-20200430135554111.png\" alt=\"image-20200430135554111\"></a></p>\n<h2 id=\"解法一：std-unordered-set\">解法一：std::unordered_set</h2>\n<p>如果不是1，转换成下一个数这好办，问题是什么数永远不可能是happy number呢，当然是无限循环的时候，什么时候无限循环，如果出现了以前出现过的数，那么我们判断是循环，这也是最简单的一种做法</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    bool isHappy(int n) {\n        // if(n == 0) return false;\n        unordered_set&lt;int&gt; set;\n        while(n != 1){\n            if(set.find(n) != set.end())\n                return false;\n            set.insert(n);\n            int sum = 0;\n            while(n &gt; 0){\n                int val = n % 10;\n                sum += val * val;\n                n /= 10;\n            }\n            n = sum;\n        }\n        return true;\n    }\n};\n</code></pre>\n<h2 id=\"解法二：快慢指针\">解法二：快慢指针</h2>\n<p>链表题里就是这么玩的，在这里当然也可以</p>\n<ul>\n<li>如果存在循环，那么说明存在环，也就是快指针一定会追上慢指针</li>\n<li>如果不存在循环，那么最后slow 和 fast 都会变成1同样跳出循环</li>\n</ul>\n<p>最后如果slow == fast == 1就是happy number，否则不是</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    bool isHappy(int n) {\n        int slow = n, fast = n;\n        do {\n            slow = getNext(slow);\n            fast = getNext(fast);\n            fast = getNext(fast);\n        } while(slow != fast);\n        return slow == 1;\n    }\n\n    int getNext(int n){\n        int sum = 0;\n        while(n &gt; 0){\n            int val = n % 10;\n            sum += val * val;\n            n /= 10;\n        }\n        return sum;\n    }\n};\n</code></pre>\n</div><script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);\n        }</script>","more":"<h1 id=\"202-Happy-Number\"><a href=\"https://leetcode-cn.com/problems/happy-number/\" target=\"_blank\" rel=\"noopener\">202. Happy Number</a></h1>\n<p><a href=\"Math-Easy/image-20200430135554111.png\" title=\"image-20200430135554111\" class=\"gallery-item\"><img src=\"image-20200430135554111.png\" alt=\"image-20200430135554111\"></a></p>\n<h2 id=\"解法一：std-unordered-set\">解法一：std::unordered_set</h2>\n<p>如果不是1，转换成下一个数这好办，问题是什么数永远不可能是happy number呢，当然是无限循环的时候，什么时候无限循环，如果出现了以前出现过的数，那么我们判断是循环，这也是最简单的一种做法</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    bool isHappy(int n) {\n        // if(n == 0) return false;\n        unordered_set&lt;int&gt; set;\n        while(n != 1){\n            if(set.find(n) != set.end())\n                return false;\n            set.insert(n);\n            int sum = 0;\n            while(n &gt; 0){\n                int val = n % 10;\n                sum += val * val;\n                n /= 10;\n            }\n            n = sum;\n        }\n        return true;\n    }\n};\n</code></pre>\n<h2 id=\"解法二：快慢指针\">解法二：快慢指针</h2>\n<p>链表题里就是这么玩的，在这里当然也可以</p>\n<ul>\n<li>如果存在循环，那么说明存在环，也就是快指针一定会追上慢指针</li>\n<li>如果不存在循环，那么最后slow 和 fast 都会变成1同样跳出循环</li>\n</ul>\n<p>最后如果slow == fast == 1就是happy number，否则不是</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    bool isHappy(int n) {\n        int slow = n, fast = n;\n        do {\n            slow = getNext(slow);\n            fast = getNext(fast);\n            fast = getNext(fast);\n        } while(slow != fast);\n        return slow == 1;\n    }\n\n    int getNext(int n){\n        int sum = 0;\n        while(n &gt; 0){\n            int val = n % 10;\n            sum += val * val;\n            n /= 10;\n        }\n        return sum;\n    }\n};\n</code></pre>\n<script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);\n        }</script>","categories":[{"name":"Algorithm","path":"api/categories/Algorithm.json"}],"tags":[{"name":"Leetcode","path":"api/tags/Leetcode.json"}]}