{"title":"Array-Medium","slug":"Array-Medium","date":"2020-04-27T13:50:02.000Z","updated":"2020-05-23T07:29:17.866Z","comments":true,"path":"api/articles/Array-Medium.json","excerpt":"Abstract：leetcode 线性表相关 Medium 难度 题解合集","covers":["image-20200427215132211.png","image-20200429140647649.png","image-20200429143922947.png","image-20200430144224282.png","image-20200430144236162.png","image-20200430171033116.png","image-20200430171047297.png","image-20200430171056746.png","image-20200430235816762.png","image-20200501001955053.png","image-20200501003723728.png","image-20200501120709959.png","image-20200501120721893.png","image-20200501120732859.png","image-20200501140513629.png","image-20200506185521306.png","image-20200506191826850.png","image-20200506210330951.png","image-20200508012701656.png","image-20200508014707098.png","image-20200511143753045.png","image-20200511213352059.png","image-20200513144756662.png","image-20200513155456262.png","image-20200515145518511.png","image-20200516003023049.png","image-20200516142035809.png","image-20200516142130938.png","image-20200517164411900.png","image-20200517171944389.png","image-20200517181325801.png","image-20200518011930210.png","image-20200523141928644.png"],"content":"<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css\"><div class=\".article-gallery\" <p><strong>Abstract</strong>：leetcode 线性表相关 Medium 难度 题解合集<p></p>\n<a id=\"more\"></a>\n<h1 id=\"16-3Sum-Closest\"><a href=\"https://leetcode-cn.com/problems/3sum-closest/\" target=\"_blank\" rel=\"noopener\">16. 3Sum Closest</a></h1>\n<p><a href=\"Array-Medium/image-20200427215132211.png\" title=\"image-20200427215132211\" class=\"gallery-item\"><img src=\"image-20200427215132211.png\" alt=\"image-20200427215132211\"></a></p>\n<h2 id=\"解法一：暴力法\">解法一：暴力法</h2>\n<p>遍历所有可能的3组数，求最接近的sum</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    int threeSumClosest(vector&lt;int&gt;&amp; nums, int target) {\n        int min = INT32_MAX, res = min;\n        for(int i = 0; i&lt;nums.size(); i++){\n            for(int j = i + 1; j&lt;nums.size(); j++){\n                for(int k = j + 1; k&lt;nums.size(); k++){\n                    int sum = nums[i] + nums[j] + nums[k];\n                    int val = std::abs(sum - target);\n                    if(val == 0) return sum;\n                    if(val &lt; min){\n                        min = val;\n                        res = sum;\n                    }\n                }\n            }\n        }\n        return res;\n    }\n};\n</code></pre>\n<h2 id=\"解法二：排序-双指针\">解法二：排序+双指针</h2>\n<p>还记得两数之和那题是靠双指针做的，这题也可以，但是要固定一个数，而且这个数必须从小到大变化，所以先排序，然后就转换成两数之和了</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    int threeSumClosest(vector&lt;int&gt;&amp; nums, int target) {\n        int min = INT32_MAX, res = min;\n        std::sort(nums.begin(), nums.end());\n        for(int i = 0; i&lt;nums.size(); i++){\n            int lo = i + 1, hi = nums.size() - 1;\n            while(lo &lt; hi){\n                int sum = nums[i] + nums[lo] + nums[hi];\n                int val = std::abs(sum - target);\n                if (val &lt; min) {\n                    res = sum;\n                    min = val;\n                }\n                if(sum &lt; target) lo++;\n                else if(sum &gt; target) hi--;\n                else return res;\n            }\n        }\n        return res;\n    }\n};\n</code></pre>\n<h1 id=\"15-3Sum\"><a href=\"https://leetcode-cn.com/problems/3sum/\" target=\"_blank\" rel=\"noopener\">15. 3Sum</a></h1>\n<p><a href=\"Array-Medium/image-20200429140647649.png\" title=\"image-20200429140647649\" class=\"gallery-item\"><img src=\"image-20200429140647649.png\" alt=\"image-20200429140647649\"></a></p>\n<h2 id=\"解法一：排序-双指针\">解法一：排序 + 双指针</h2>\n<p>同上题，暴力解就不写了，这题的坑点在去重，因为要求<strong>unique triplets</strong></p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n\tvector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) {\n\t\tstd::vector&lt;vector&lt;int&gt;&gt; res;\n\t\tif (nums.size() &lt; 3) return res;\n\t\tstd::sort(nums.begin(), nums.end());\n\n\t\tfor (int i = 0; i &lt; nums.size() - 2; i++) {\n\t\t\tif (nums[i] &gt; 0) return res;\n\t\t\tif (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1]) continue;\n\t\t\tint lo = i + 1, hi = nums.size() - 1;\n\t\t\twhile (lo &lt; hi) {\n\t\t\t\tint sum = nums[i] + nums[lo] + nums[hi];\n\t\t\t\tif (sum == 0) {\n\t\t\t\t\tres.push_back({ nums[i], nums[lo], nums[hi] });\n\t\t\t\t\twhile (lo &lt; hi &amp;&amp; nums[lo] == nums[lo + 1]) lo++;\n\t\t\t\t\twhile (lo &lt; hi &amp;&amp; nums[hi] == nums[hi - 1]) hi--;\n\t\t\t\t\tlo++;\n\t\t\t\t\thi--;\n\t\t\t\t}\n\t\t\t\telse if (sum &gt; 0)\n\t\t\t\t\thi--;\n\t\t\t\telse\n\t\t\t\t\tlo++;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n};\n</code></pre>\n<h1 id=\"18-4Sum\"><a href=\"https://leetcode-cn.com/problems/4sum/\" target=\"_blank\" rel=\"noopener\">18. 4Sum</a></h1>\n<p><a href=\"Array-Medium/image-20200429143922947.png\" title=\"image-20200429143922947\" class=\"gallery-item\"><img src=\"image-20200429143922947.png\" alt=\"image-20200429143922947\"></a></p>\n<h2 id=\"解法一：同上\">解法一：同上</h2>\n<p>同上，好像只能套一层双指针的样子，复杂度依然有n^3</p>\n<p>另外由于target可以为负数，所以nums[i] &gt; target  &amp; nums[i] + nums[j] &gt; target 就 return 的好性质就没了</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n\tvector&lt;vector&lt;int&gt;&gt; fourSum(vector&lt;int&gt;&amp; nums, int target) {\n\t\tvector&lt;vector&lt;int&gt;&gt; res;\n\t\tif (nums.size() &lt; 4) return res;\n\t\tstd::sort(nums.begin(), nums.end());\n\n\t\tfor (int i = 0; i &lt; nums.size() - 3; i++) {\n\t\t\tif (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1]) continue;\n\t\t\tfor (int j = i + 1; j &lt; nums.size() - 2; j++) {\n\t\t\t\tif (j &gt; i + 1 &amp;&amp; nums[j] == nums[j - 1]) continue;\n\t\t\t\tint lo = j + 1, hi = nums.size() - 1;\n\t\t\t\twhile (lo &lt; hi) {\n\t\t\t\t\tint sum = nums[i] + nums[j] + nums[lo] + nums[hi];\n\t\t\t\t\tif (sum == target) {\n\t\t\t\t\t\tres.push_back({ nums[i],nums[j],nums[lo],nums[hi] });\n\t\t\t\t\t\twhile (lo &lt; hi &amp;&amp; nums[lo] == nums[lo + 1]) lo++;\n\t\t\t\t\t\twhile (lo &lt; hi &amp;&amp; nums[hi] == nums[hi - 1]) hi--;\n\t\t\t\t\t\tlo++;\n\t\t\t\t\t\thi--;\n\t\t\t\t\t}\n\t\t\t\t\telse if (sum &gt; target) hi--;\n\t\t\t\t\telse if (sum &lt; target) lo++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n};\n</code></pre>\n<h1 id=\"48-Rotate-Image\"><a href=\"https://leetcode-cn.com/problems/rotate-image/\" target=\"_blank\" rel=\"noopener\">48. Rotate Image</a></h1>\n<p><a href=\"Array-Medium/image-20200430144224282.png\" title=\"image-20200430144224282\" class=\"gallery-item\"><img src=\"image-20200430144224282.png\" alt=\"image-20200430144224282\"></a></p>\n<p><a href=\"Array-Medium/image-20200430144236162.png\" title=\"image-20200430144236162\" class=\"gallery-item\"><img src=\"image-20200430144236162.png\" alt=\"image-20200430144236162\"></a></p>\n<h2 id=\"解法一：先转置再求反\">解法一：先转置再求反</h2>\n<p>一开始以为是转置，结果发现刚好反过来，那就再求一次reverse就好了，但是直觉上就知道这样有点先降温再烧水的意味</p>\n<ul>\n<li>注意交换的时候只交换上三角</li>\n</ul>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    void rotate(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {\n        int row = matrix.size(), col = matrix[0].size();\n        for (int i = 0; i &lt; row; i++) {\n            for (int j = i + 1; j &lt; col; j++) {\n                int tmp = matrix[i][j];\n                matrix[i][j] = matrix[j][i];\n                matrix[j][i] = tmp;\n            }\n        }\n        for (vector&lt;int&gt;&amp; v : matrix) {\n            std::reverse(v.begin(), v.end());\n        }\n    }\n};\n</code></pre>\n<h2 id=\"解法二：旋转变换\">解法二：旋转变换</h2>\n<p>反正我是没想出来，抄答案的</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    void rotate(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {\n        int n = matrix.size();\n        for (int i = 0; i &lt; (n + 1) / 2; i++) {\n            for (int j = 0; j &lt; n / 2; j++) {\n                int temp = matrix[n - 1 - j][i];\n                matrix[n - 1 - j][i] = matrix[n - 1 - i][n - j - 1];\n                matrix[n - 1 - i][n - j - 1] = matrix[j][n - 1 - i];\n                matrix[j][n - 1 - i] = matrix[i][j];\n                matrix[i][j] = temp;\n            }\n        }\n    }\n};\n</code></pre>\n<h1 id=\"36-Valid-Sudoku\"><a href=\"https://leetcode-cn.com/problems/valid-sudoku/\" target=\"_blank\" rel=\"noopener\">36. Valid Sudoku</a></h1>\n<p><a href=\"Array-Medium/image-20200430171033116.png\" title=\"image-20200430171033116\" class=\"gallery-item\"><img src=\"image-20200430171033116.png\" alt=\"image-20200430171033116\"></a></p>\n<p><a href=\"Array-Medium/image-20200430171047297.png\" title=\"image-20200430171047297\" class=\"gallery-item\"><img src=\"image-20200430171047297.png\" alt=\"image-20200430171047297\"></a></p>\n<p><a href=\"Array-Medium/image-20200430171056746.png\" title=\"image-20200430171056746\" class=\"gallery-item\"><img src=\"image-20200430171056746.png\" alt=\"image-20200430171056746\"></a></p>\n<h2 id=\"解法一：暴力法（三次遍历）\">解法一：暴力法（三次遍历）</h2>\n<p>依次按行遍历，按列遍历，按九宫格遍历，用unordered_map记录出现的数字的次数，每轮超过一次算错</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n\tbool isValidSudoku(vector&lt;vector&lt;char&gt;&gt;&amp; board) {\n\t\tunordered_map&lt;char, int&gt; map;\n\t\tfor (int i = 0; i &lt; board.size(); i++) {\n\t\t\tmap.clear();\n\t\t\tfor (int j = 0; j &lt; board[0].size(); j++) {\n\t\t\t\tint count = map[board[i][j]]++;\n\t\t\t\tif (isdigit(board[i][j]) &amp;&amp; count &gt; 0)\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (int i = 0; i &lt; board.size(); i++) {\n\t\t\tmap.clear();\n\t\t\tfor (int j = 0; j &lt; board[0].size(); j++) {\n\t\t\t\tint count = map[board[j][i]]++;\n\t\t\t\tif (isdigit(board[j][i]) &amp;&amp; count &gt; 0)\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (int i = 0; i &lt; 3; i++) {\n\t\t\tfor (int j = 0; j &lt; 3; j++) {\n\t\t\t\tmap.clear();\n\t\t\t\tfor (int m = i * 3; m &lt; i * 3 + 3; m++) {\n\t\t\t\t\tfor (int n = j * 3; n &lt; j * 3 + 3; n++) {\n\t\t\t\t\t\tint count = map[board[m][n]]++;\n\t\t\t\t\t\tif (isdigit(board[m][n]) &amp;&amp; count &gt; 0)\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n};\n</code></pre>\n<h2 id=\"解法二：一次遍历\">解法二：一次遍历</h2>\n<p>其实可以一次遍历，前提是要知道在哪行哪列哪个box</p>\n<p>因为只有9个数，哈希容器也可以换成bool数组</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    bool isValidSudoku(vector&lt;vector&lt;char&gt;&gt;&amp; board) {\n        bool row[9][9] = { false }, col[9][9] = { false }, box[9][9] = { false };\n        for (int i = 0; i &lt; 9; i++) {\n            for (int j = 0; j &lt; 9; j++) {\n                if (board[i][j] == '.') continue;\n                int box_idx = (i / 3) * 3 + j / 3;\n                int val = board[i][j] - '1';\n                if (row[i][val] || col[j][val] || box[box_idx][val])\n                    return false;\n                row[i][val] = col[j][val] = box[box_idx][val] = true;\n            }\n        }\n        return true;\n    }\n};\n</code></pre>\n<h1 id=\"54-Spiral-Matrix\"><a href=\"https://leetcode-cn.com/problems/spiral-matrix/\" target=\"_blank\" rel=\"noopener\">54. Spiral Matrix</a></h1>\n<p><a href=\"Array-Medium/image-20200430235816762.png\" title=\"image-20200430235816762\" class=\"gallery-item\"><img src=\"image-20200430235816762.png\" alt=\"image-20200430235816762\"></a></p>\n<h2 id=\"解法一：标记访问点\">解法一：标记访问点</h2>\n<p>按顺序向右，向下，向左，向上，直到”撞墙“，需要“预判”，当下一个被访问过或要越界的时候就转向</p>\n<p>这里有点投机取巧，用INT32_MAX作标记，而且直接修改了原数组脏了数据</p>\n<p>替代方案是开另一个等大的数组来记录是否被访问过，但我懒得改了（ 就这样吧（</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    vector&lt;int&gt; spiralOrder(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {\n        if (matrix.empty()) return {};\n        int row = matrix.size(), col = matrix[0].size();\n        vector&lt;int&gt; sp = vector&lt;int&gt;(row * col);\n        int num = 0, tot = row * col, x, y;\n        sp[0] = matrix[y = 0][x = 0];\n        matrix[0][0] = INT32_MAX;\n        while (num &lt; tot - 1) {\n            while (x &lt; col - 1 &amp;&amp; INT32_MAX != matrix[y][x + 1]) { sp[++num] = matrix[y][++x]; matrix[y][x] = INT32_MAX; }\n            while (y &lt; row - 1 &amp;&amp; INT32_MAX != matrix[y + 1][x]) { sp[++num] = matrix[++y][x]; matrix[y][x] = INT32_MAX; }\n            while (x &gt; 0 &amp;&amp; INT32_MAX != matrix[y][x - 1]) { sp[++num] = matrix[y][--x]; matrix[y][x] = INT32_MAX; }\n            while (y &gt; 0 &amp;&amp; INT32_MAX != matrix[y - 1][x]) { sp[++num] = matrix[--y][x]; matrix[y][x] = INT32_MAX; }\n        }\n        return sp;\n    }\n};\n</code></pre>\n<h1 id=\"59-Spiral-Matrix-II\"><a href=\"https://leetcode-cn.com/problems/spiral-matrix-ii/\" target=\"_blank\" rel=\"noopener\">59. Spiral Matrix II</a></h1>\n<p><a href=\"Array-Medium/image-20200501001955053.png\" title=\"image-20200501001955053\" class=\"gallery-item\"><img src=\"image-20200501001955053.png\" alt=\"image-20200501001955053\"></a></p>\n<h2 id=\"解法一：紫书原题好吧\">解法一：紫书原题好吧</h2>\n<p>做法同54题 <code>Spiral Matrix</code>，比起Ⅰ甚至不需要标记访问点了，更简单了</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; generateMatrix(int n) {\n        if(n == 0) return {};\n        int size = n * n, tot = 1, x, y;\n        vector&lt;vector&lt;int&gt;&gt; map = vector&lt;vector&lt;int&gt;&gt;(n);\n        for(vector&lt;int&gt;&amp; v : map) v = vector&lt;int&gt;(n);\n        map[x = 0][y = 0] = 1;\n        while(tot &lt; size){\n            while(x + 1 &lt; n &amp;&amp; !map[y][x+1]) map[y][++x] = ++tot;\n            while(y + 1 &lt; n &amp;&amp; !map[y+1][x]) map[++y][x] = ++tot;\n            while(x &gt; 0 &amp;&amp; !map[y][x-1]) map[y][--x] = ++tot;\n            while(y &gt; 0 &amp;&amp; !map[y-1][x]) map[--y][x] = ++tot;\n        }\n        return map;\n    }\n};\n</code></pre>\n<h1 id=\"73-Set-Matrix-Zeroes\"><a href=\"https://leetcode-cn.com/problems/set-matrix-zeroes/\" target=\"_blank\" rel=\"noopener\">73. Set Matrix Zeroes</a></h1>\n<p><a href=\"Array-Medium/image-20200501003723728.png\" title=\"image-20200501003723728\" class=\"gallery-item\"><img src=\"image-20200501003723728.png\" alt=\"image-20200501003723728\"></a></p>\n<h2 id=\"解法一：暴力法-v2\">解法一：暴力法</h2>\n<p>先遍历一次记下所有0元素的行数和列数，然后重新遍历一次把对应的行和列置零，空间复杂度O(m + n)</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    void setZeroes(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {\n        unordered_set&lt;int&gt; row, col;\n        for(int i = 0;i&lt;matrix.size();i++){\n            for(int j = 0;j&lt;matrix[0].size();j++){\n                if(matrix[i][j] == 0){\n                    row.emplace(i);\n                    col.emplace(j);\n                }\n            }\n        }\n\n        for(int i = 0;i&lt;matrix.size();i++){\n            for(int j = 0;j&lt;matrix[0].size();j++){\n                if(row.find(i) != row.end() || col.find(j) != col.end())\n                    matrix[i][j] = 0;\n            }\n        }\n    }\n};\n</code></pre>\n<h2 id=\"解法二：\">解法二：</h2>\n<h1 id=\"1424-Diagonal-Traverse-II\"><a href=\"https://leetcode-cn.com/problems/diagonal-traverse-ii/\" target=\"_blank\" rel=\"noopener\">1424. Diagonal Traverse II</a></h1>\n<p><a href=\"Array-Medium/image-20200501120709959.png\" title=\"image-20200501120709959\" class=\"gallery-item\"><img src=\"image-20200501120709959.png\" alt=\"image-20200501120709959\"></a></p>\n<p><a href=\"Array-Medium/image-20200501120721893.png\" title=\"image-20200501120721893\" class=\"gallery-item\"><img src=\"image-20200501120721893.png\" alt=\"image-20200501120721893\"></a></p>\n<p><a href=\"Array-Medium/image-20200501120732859.png\" title=\"image-20200501120732859\" class=\"gallery-item\"><img src=\"image-20200501120732859.png\" alt=\"image-20200501120732859\"></a></p>\n<h2 id=\"解法一：顺序遍历\">解法一：顺序遍历</h2>\n<p>学过初中数学都知道，直线上 x + y = c (c为常数)，依照这个性质就可以用正常的遍历顺序取到每一层反向的结果，最后再反向存入一个新的res数组就行了</p>\n<ul>\n<li>顺带一提，由于i,j的规模达到10^9，暴力法是不可行的，会超时，即使是顺序遍历也要500ms上下</li>\n</ul>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    vector&lt;int&gt; findDiagonalOrder(vector&lt;vector&lt;int&gt;&gt;&amp; nums) {\n        vector&lt;vector&lt;int&gt;&gt; map;\n        for(int i = 0;i &lt; nums.size(); i++){\n            for(int j = 0; j &lt; nums[i].size(); j++){\n                int idx = i + j;\n                if(idx &gt;= map.size()) map.push_back({});\n                map[idx].push_back(nums[i][j]);\n            }\n        }\n        vector&lt;int&gt; res;\n        for(int i = 0;i&lt;map.size();i++){\n            for(int j = map[i].size() - 1; j&gt;-1;j--){\n                res.push_back(map[i][j]);\n            }\n        }\n        return res;\n    }\n};\n</code></pre>\n<h1 id=\"56-Merge-Intervals\"><a href=\"https://leetcode-cn.com/problems/merge-intervals/\" target=\"_blank\" rel=\"noopener\">56. Merge Intervals</a></h1>\n<p><a href=\"Array-Medium/image-20200501140513629.png\" title=\"image-20200501140513629\" class=\"gallery-item\"><img src=\"image-20200501140513629.png\" alt=\"image-20200501140513629\"></a></p>\n<h2 id=\"解法一：先排序\">解法一：先排序</h2>\n<p>按左端点排序，那么判断重合就好办了</p>\n<ul>\n<li>只要下一个区间的左端点小于等于这个区间的右端点，就修改这个区间的左右端点</li>\n<li>如果不重合，就直接push下一个区间，同时指向下一个区间</li>\n</ul>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; merge(vector&lt;vector&lt;int&gt;&gt;&amp; intervals) {\n        if(intervals.size() &lt;= 1) return intervals;\n        std::sort(intervals.begin(),intervals.end(),[](vector&lt;int&gt; a, vector&lt;int&gt; b){\n            return a[0] &lt; b[0];\n        });\n        vector&lt;vector&lt;int&gt;&gt; res;\n        int i = 0, j = 1;\n        res.push_back(intervals[0]);\n        while(j &lt; intervals.size()) {\n            if(intervals[j][0] &lt;= res[i][1]){\n                res[i][0] = std::min(res[i][0], intervals[j][0]);\n                res[i][1] = std::max(res[i][1], intervals[j][1]);\n                j++;\n            }\n            else{\n                res.push_back(intervals[j]);\n                i++;\n            }   \n        }\n        return res;\n    }\n};\n</code></pre>\n<p>原来vector可以默认按第一位排序。。删掉lambda比较函数后，快了不少。。</p>\n<pre><code class=\"language-cpp\">std::sort(intervals.begin(),intervals.end());\n</code></pre>\n<h1 id=\"228-Summary-Ranges\"><a href=\"https://leetcode-cn.com/problems/summary-ranges/\" target=\"_blank\" rel=\"noopener\">228. Summary Ranges</a></h1>\n<p><a href=\"Array-Medium/image-20200506185521306.png\" title=\"image-20200506185521306\" class=\"gallery-item\"><img src=\"image-20200506185521306.png\" alt=\"image-20200506185521306\"></a></p>\n<h2 id=\"解法一：一次性遍历\">解法一：一次性遍历</h2>\n<p>就这？</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    vector&lt;string&gt; summaryRanges(vector&lt;int&gt;&amp; nums) {\n        if(nums.empty()) return {};\n        vector&lt;string&gt; res;\n        int start = 0, end = 0;\n        for(int i = 0; i &lt; nums.size() - 1; i++) {\n            if(nums[i] != nums[i + 1] - 1) {\n                end = i;\n                if(start == end) \n                    res.push_back(to_string(nums[end]));\n                else\n                    res.push_back(to_string(nums[start]) + &quot;-&gt;&quot; + to_string(nums[end]));\n                start = end + 1;\n            } \n        }\n        end = nums.size() - 1;\n        if(start == end) \n            res.push_back(to_string(nums[end]));\n        else\n            res.push_back(to_string(nums[start]) + &quot;-&gt;&quot; + to_string(nums[end]));\n        return res;\n    }\n};\n</code></pre>\n<h1 id=\"1277-Count-Square-Submatrices-with-All-Ones\"><a href=\"https://leetcode-cn.com/problems/count-square-submatrices-with-all-ones/\" target=\"_blank\" rel=\"noopener\">1277. Count Square Submatrices with All Ones</a></h1>\n<p><a href=\"Array-Medium/image-20200506191826850.png\" title=\"image-20200506191826850\" class=\"gallery-item\"><img src=\"image-20200506191826850.png\" alt=\"image-20200506191826850\"></a></p>\n<h2 id=\"解法一：DP\">解法一：DP</h2>\n<p>同上题</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    int countSquares(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {\n        if(matrix.empty() || matrix[0].empty()) return 0;\n        vector&lt;vector&lt;int&gt;&gt; dp(matrix.size(), vector&lt;int&gt;(matrix[0].size()));\n        int res = 0;\n        for (int i = 0; i &lt; matrix.size(); i++) {\n            for (int j = 0; j &lt; matrix[0].size(); j++) {\n                if (matrix[i][j] == 1) {\n                    if (i == 0 || j == 0) \n                        res += dp[i][j] = 1;\n                    else\n                        res += dp[i][j] = std::min(dp[i - 1][j], std::min(dp[i][j - 1], dp[i - 1][j - 1])) + 1;\n                }\n            }\n        }\n        return res;\n    }\n};\n</code></pre>\n<h1 id=\"215-Kth-Largest-Element-in-an-Array\"><a href=\"https://leetcode-cn.com/problems/kth-largest-element-in-an-array/\" target=\"_blank\" rel=\"noopener\">215. Kth Largest Element in an Array</a></h1>\n<p><a href=\"Array-Medium/image-20200506210330951.png\" title=\"image-20200506210330951\" class=\"gallery-item\"><img src=\"image-20200506210330951.png\" alt=\"image-20200506210330951\"></a></p>\n<h2 id=\"解法一：排序\">解法一：排序</h2>\n<p>可以，但是没必要</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    int findKthLargest(vector&lt;int&gt;&amp; nums, int k) {\n        std::sort(nums.begin(), nums.end(), greater&lt;int&gt;());\n        return nums[k - 1];\n    }\n};\n</code></pre>\n<h2 id=\"解法二：小根堆\">解法二：小根堆</h2>\n<p>但是需要辅助空间，而且只求前k时也不是效率最高的，因为本质上还是排了前k的序</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    int findKthLargest(vector&lt;int&gt;&amp; nums, int k) {\n        priority_queue&lt;int&gt; q;\n        for(int i = 0; i &lt; nums.size(); i++) {\n        \tq.push(nums[i]);\n            if(q.size() &gt; k) q.pop();\n        }\n        return q.top();\n    }\n};\n</code></pre>\n<h2 id=\"解法三：快速选择\">解法三：快速选择</h2>\n<p>相当于一个阉割版的快排，为了去掉一些快排中在这个问题下的冗余操作</p>\n<ul>\n<li>快排中每轮排序都能取得一个数在排序数组中的最终位置</li>\n<li>题目要求的是第k大的数，也就是最终位置为 size - k + 1，索引为size - k的元素</li>\n<li>如果一轮排序找到的索引大于size - k，那就只向下继续排，否则向上排，直到刚好等于size - k</li>\n<li>时间复杂度来到O(n)</li>\n</ul>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    int partition(vector&lt;int&gt; &amp;nums, int left, int right) {\n        swap(nums[left], nums[rand() % (right - left + 1) + left]); // \n        int pivot = nums[left];\n        int hi = left;\n        for (int lo = left + 1; lo &lt;= right; lo++) {\n            if (nums[lo] &lt; pivot) {\n                swap(nums[lo], nums[++hi]);\n            }\n        }\n        swap(nums[left], nums[hi]);\n        return hi;\n    }\n\n    int findKthLargest(vector&lt;int&gt; &amp;nums, int k) {\n        int target = nums.size() - k;\n        int lo = 0, hi = nums.size() - 1;\n        while (lo &lt;= hi) {\n            int res = partition(nums, lo, hi);\n            if(res == target) return nums[res];\n            else if(res &lt; target) lo = res + 1;\n            else hi = res - 1;\n        }\n        return -1;\n    }\n};\n</code></pre>\n<h1 id=\"229-Majority-Element-II\"><a href=\"https://leetcode-cn.com/problems/majority-element-ii/\" target=\"_blank\" rel=\"noopener\">229. Majority Element II</a></h1>\n<p><a href=\"Array-Medium/image-20200508012701656.png\" title=\"image-20200508012701656\" class=\"gallery-item\"><img src=\"image-20200508012701656.png\" alt=\"image-20200508012701656\"></a></p>\n<h2 id=\"解法一：排序-哈希\">解法一：排序 &amp; 哈希</h2>\n<p>排序可以一次统计同一个数字，哈希可以直接统计每个数字</p>\n<p>但是前者时间复杂度O(nlogn)，后者空间复杂度O(n)，都不满足要求，也很简单就不贴了</p>\n<h2 id=\"解法二：摩尔投票法\">解法二：摩尔投票法</h2>\n<p>摩尔投票法的图形化理解请参考<a href=\"https://leetcode-cn.com/problems/majority-element-ii/solution/cong-zhu-xing-tu-jiao-chao-ji-su-li-jie-wei-shi-ya/\" target=\"_blank\" rel=\"noopener\">从柱状图角度理解</a></p>\n<ul>\n<li>对于出现超过 n / m 次的众数，最多有 m -  1 个，本题显然最多只能有两个存在</li>\n<li>用摩尔投票法考虑两个候选人，这两个就是出现次数最多的两个</li>\n<li>但是出现次数最多不代表超过 n / 3 ，所以求得候选数之后还要遍历一次来验证是否正确</li>\n<li>另外侯选数可能重复，记得去重</li>\n</ul>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    vector&lt;int&gt; majorityElement(vector&lt;int&gt;&amp; nums) {\n        if(nums.empty()) return {};\n        int cand1 = nums[0], cand2 = nums[0];\n        int cnt1 = 0, cnt2 = 0;\n        for(int i : nums) {\n            if(i == cand1) cnt1++;\n            else if(i == cand2) cnt2++;\n            else if(cnt1 == 0) {\n                cnt1 = 1;\n                cand1 = i;\n            }\n            else if(cnt2 == 0) {\n                cnt2 = 1;\n                cand2 = i;\n            }\n            else {\n                cnt1--; cnt2--;\n            }\n        }\n        cnt1 = 0, cnt2 = 0;\n        for(int i : nums) {\n            if(i == cand1) cnt1++;\n            if(i == cand2) cnt2++;\n        }\n        vector&lt;int&gt; res;\n        if(cnt1 &gt; nums.size() / 3) res.push_back(cand1);\n        if(cand2 != cand1 &amp;&amp; cnt2 &gt; nums.size() / 3) res.push_back(cand2);\n        return res;\n\n    }\n};\n</code></pre>\n<h1 id=\"220-Contains-Duplicate-III\"><a href=\"https://leetcode-cn.com/problems/contains-duplicate-iii/\" target=\"_blank\" rel=\"noopener\">220. Contains Duplicate III</a></h1>\n<p><a href=\"Array-Medium/image-20200508014707098.png\" title=\"image-20200508014707098\" class=\"gallery-item\"><img src=\"image-20200508014707098.png\" alt=\"image-20200508014707098\"></a></p>\n<h2 id=\"解法一：暴力法-v3\">解法一：暴力法</h2>\n<p>超时，但是如果面向测试用例编程倒是可以 😅</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    bool containsNearbyAlmostDuplicate(vector&lt;int&gt;&amp; nums, int k, int t) {\n        // if (k == 10000) return false; 加上这句可以暴力法通过99.9%\n        int max_t = -1, max_k = -1;\n        for(int i = 0; i &lt; nums.size(); i++) {\n            for(int j = i + 1; j &lt; nums.size(); j++) {\n                if (abs((long)nums[i] - (long)nums[j]) &lt;= t &amp;&amp; abs(i - j) &lt;= k)\n                    return true;\n            }\n        }\n        return false;\n    }\n};\n</code></pre>\n<h2 id=\"解法二：排序\">解法二：排序</h2>\n<p>显然如果有序的话，就能在线性时间内解决，但是排序会丢掉索引</p>\n<h1 id=\"274-H-Index\"><a href=\"https://leetcode-cn.com/problems/h-index/\" target=\"_blank\" rel=\"noopener\">274. H-Index</a></h1>\n<p><a href=\"Array-Medium/image-20200511143753045.png\" title=\"image-20200511143753045\" class=\"gallery-item\"><img src=\"image-20200511143753045.png\" alt=\"image-20200511143753045\"></a></p>\n<h2 id=\"解法一：直接排序\">解法一：直接排序</h2>\n<p>题意是对于所有n来说求不小于num[i]的个数的最大值，那么排序是个很显然的思路</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    int hIndex(vector&lt;int&gt;&amp; citations) {\n        std::sort(citations.begin(), citations.end(), greater&lt;int&gt;());\n        int res = 0;\n        for(int i = 0; i &lt; citations.size(); i++) {\n            if(citations[i] &gt;= i + 1) res = std::max(res, i + 1);\n        }\n        return res;\n    }\n};\n</code></pre>\n<h2 id=\"解法二：计数排序\">解法二：计数排序</h2>\n<h1 id=\"300-Longest-Increasing-Subsequence\"><a href=\"https://leetcode-cn.com/problems/longest-increasing-subsequence/\" target=\"_blank\" rel=\"noopener\">300. Longest Increasing Subsequence</a></h1>\n<p><a href=\"Array-Medium/image-20200511213352059.png\" title=\"image-20200511213352059\" class=\"gallery-item\"><img src=\"image-20200511213352059.png\" alt=\"image-20200511213352059\"></a></p>\n<h2 id=\"解法一：DP-v2\">解法一：DP</h2>\n<ul>\n<li>\n<p>构造一个前缀最大长度数组DP</p>\n</li>\n<li>\n<p>转移方程显然是</p>\n<pre><code class=\"language-cpp\">dp[i] = max(dp[j] + 1, dp[i]); // j &lt; i 且 nums[j] &lt; nums[i]\n</code></pre>\n</li>\n</ul>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    int lengthOfLIS(vector&lt;int&gt;&amp; nums) {\n        if(nums.empty()) return 0;\n        vector&lt;int&gt; dp(nums.size(), 1);\n        int max = 1;\n        for(int i = 1; i &lt; nums.size(); i++) {\n            for(int j = 0; j &lt; i;j++) {\n                if(nums[i] &gt; nums[j]) {\n                    dp[i] = std::max(dp[j] + 1, dp[i]);\n                }\n            }\n            max = std::max(max, dp[i]);\n        }\n        return max;\n    }\n};\n</code></pre>\n<h2 id=\"解法二：贪心\">解法二：贪心</h2>\n<h1 id=\"238-Product-of-Array-Except-Self\"><a href=\"https://leetcode-cn.com/problems/product-of-array-except-self/\" target=\"_blank\" rel=\"noopener\">238. Product of Array Except Self</a></h1>\n<p><a href=\"Array-Medium/image-20200513144756662.png\" title=\"image-20200513144756662\" class=\"gallery-item\"><img src=\"image-20200513144756662.png\" alt=\"image-20200513144756662\"></a></p>\n<h2 id=\"解法一：前缀积-后缀积\">解法一：前缀积 &amp; 后缀积</h2>\n<p>这题本来求出总的积再分别除数组的各位就可以解决（而且是线性时间 + 常数空间），但是题目要求不能使用除法，第一时间想到的就是这个</p>\n<p>也就是除自己以外的乘积等价于左边的乘积 * 右边的乘积，那用数组把对应的前缀积和后缀积记下来再相乘填入就行了</p>\n<p>但是题目还要求常数空间，而现在用了8n个额外字节，下一步应该是把两个数组优化成两个变量</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    vector&lt;int&gt; productExceptSelf(vector&lt;int&gt;&amp; nums) {\n        int len = nums.size();\n        vector&lt;int&gt; prefix(len, 1), suffix(len, 1);\n        prefix[0] = nums[0], suffix[len - 1] = nums[len - 1];\n        for(int i = 1; i &lt; len; i++) {\n            prefix[i] = prefix[i - 1] * nums[i];\n            suffix[len - i - 1] = suffix[len - i] * nums[len - i - 1];\n        }\n\n        vector&lt;int&gt; res(len);\n        for(int i = 1; i &lt; len - 1; i++) {\n            res[i] = suffix[i + 1] * prefix[i - 1];\n        }\n        res[0] = suffix[1], res[len - 1] = prefix[len - 2];\n        return res;\n    }\n};\n</code></pre>\n<p><strong>优化辅助空间</strong></p>\n<ul>\n<li>先从左往右遍历，让各位乘以对应的前缀积</li>\n<li>再从右往左遍历，各位乘以后缀积</li>\n</ul>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    vector&lt;int&gt; productExceptSelf(vector&lt;int&gt;&amp; nums) {\n        int len = nums.size();\n        vector&lt;int&gt; res(len, 1);\n        int prefix = 1, suffix = 1;\n        for(int i = 1; i &lt; len; i++) {\n            prefix *= nums[i - 1];\n            res[i] *= prefix;\n        }\n\n        for(int i = len - 2; i &gt; -1; i--) {\n            suffix *= nums[i + 1];\n            res[i] *= suffix;\n        }\n        res[0] = suffix, res[len - 1] = prefix;\n\n        return res;\n    }\n};\n</code></pre>\n<p><strong>实际上只需要一次遍历</strong></p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    vector&lt;int&gt; productExceptSelf(vector&lt;int&gt;&amp; nums) {\n        int len = nums.size();\n        vector&lt;int&gt; res(len, 1);\n        int prefix = 1, suffix = 1;\n        for(int i = 0; i &lt; len; i++) {\n            res[i] *= prefix;\n            res[len - i - 1] *= suffix;\n            prefix *= nums[i];\n            suffix *= nums[len - i - 1];\n        }\n        return res;\n    }\n};\n</code></pre>\n<h1 id=\"216-Combination-Sum-III\"><a href=\"https://leetcode-cn.com/problems/combination-sum-iii/\" target=\"_blank\" rel=\"noopener\">216. Combination Sum III</a></h1>\n<p><a href=\"Array-Medium/image-20200513155456262.png\" title=\"image-20200513155456262\" class=\"gallery-item\"><img src=\"image-20200513155456262.png\" alt=\"image-20200513155456262\"></a></p>\n<h2 id=\"解法一：回溯法\">解法一：回溯法</h2>\n<p>注意只能取 0 ~ 9</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; res;\n\n    vector&lt;vector&lt;int&gt;&gt; combinationSum3(int k, int n) {\n        dfs(k, n, 1, vector&lt;int&gt;());\n        return res;\n    }\n\n    void dfs(int k, int n, int start, vector&lt;int&gt; v) {\n        if(k == 0 &amp;&amp; n == 0) {\n            res.push_back(v);\n            return;\n        }\n        for(int i = start; i &lt;= 9; i++) {\n            if(i &lt;= n) {\n                v.push_back(i);\n                dfs(k - 1, n - i, i + 1, v);\n                v.pop_back();\n            }\n        }\n    }\n};\n</code></pre>\n<p><strong>还可以再剪枝</strong></p>\n<h1 id=\"560-Subarray-Sum-Equals-K\"><a href=\"https://leetcode-cn.com/problems/subarray-sum-equals-k/\" target=\"_blank\" rel=\"noopener\">560. Subarray Sum Equals K</a></h1>\n<p><a href=\"Array-Medium/image-20200515145518511.png\" title=\"image-20200515145518511\" class=\"gallery-item\"><img src=\"image-20200515145518511.png\" alt=\"image-20200515145518511\"></a></p>\n<h2 id=\"解法一：暴力【超时】\">解法一：暴力【超时】</h2>\n<p>两重循环枚举所有可能的sum</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    int subarraySum(vector&lt;int&gt;&amp; nums, int k) {\n        if(nums.size() == 1) return nums[0] == k;\n        int res = 0;\n        for(int i = 0; i &lt; nums.size(); i++) {\n            int sum = 0;\n            for(int j = i; j &lt; nums.size(); j++) {\n                sum += nums[j];\n                if(sum == k) res++;\n            }\n        } \n        return res;\n    }\n};\n</code></pre>\n<h2 id=\"解法二：前缀和\">解法二：前缀和</h2>\n<p>参考523题</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    int subarraySum(vector&lt;int&gt;&amp; nums, int k) {\n        unordered_map&lt;int, int&gt; map;\n        map[0] = 1;\n        int sum = 0, res = 0;\n        for(int&amp; i : nums) {\n            sum += i;\n            int val = sum - k;\n            res += map[val];\n            map[sum]++;\n        }\n        return res;\n    }\n};\n</code></pre>\n<h1 id=\"60-Permutation-Sequence\"><a href=\"https://leetcode-cn.com/problems/permutation-sequence/\" target=\"_blank\" rel=\"noopener\">60. Permutation Sequence</a></h1>\n<p><a href=\"Array-Medium/image-20200516003023049.png\" title=\"image-20200516003023049\" class=\"gallery-item\"><img src=\"image-20200516003023049.png\" alt=\"image-20200516003023049\"></a></p>\n<h2 id=\"解法一：回溯法【超时】\">解法一：回溯法【超时】</h2>\n<p>按顺序枚举所有可能性，用 <code>vector&lt;bool&gt;</code>来记录已经加入的数字</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    int cnt;\n    string ans;\n    string getPermutation(int n, int k) {\n        cnt = k;\n        genPermutation(n, vector&lt;bool&gt;(10, true), &quot;&quot;);\n        return ans;\n    }\n\n    void genPermutation(int n, vector&lt;bool&gt; set, string res) {\n        if(res.length() == n) {\n            cnt--;\n            if(cnt == 0) ans = res;\n        }\n        for(int i = 1; i &lt;= n; i++) {\n            if(set[i] == true) {\n                set[i] = false;\n                res += to_string(i);\n                genPermutation(n, set, res);\n                res.pop_back();\n                set[i] = true;\n            }\n        }\n    }\n\n};\n</code></pre>\n<h2 id=\"解法二：-v2\">解法二：</h2>\n<h1 id=\"78-Subsets\"><a href=\"https://leetcode-cn.com/problems/subsets/\" target=\"_blank\" rel=\"noopener\">78. Subsets</a></h1>\n<p><a href=\"Array-Medium/image-20200516142035809.png\" title=\"image-20200516142035809\" class=\"gallery-item\"><img src=\"image-20200516142035809.png\" alt=\"image-20200516142035809\"></a></p>\n<h2 id=\"解法一：回溯法-v2\">解法一：回溯法</h2>\n<p>因为没有限制条件，所以没法剪枝，也就是必须搜完所有状态</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; subsets(vector&lt;int&gt;&amp; nums) {\n        vector&lt;vector&lt;int&gt;&gt; res;\n        dfs(nums, 0, res, vector&lt;int&gt;());\n        return res;\n    }\n\n    void dfs(vector&lt;int&gt;&amp; nums, int start, vector&lt;vector&lt;int&gt;&gt;&amp; res, vector&lt;int&gt; curr) {\n        res.push_back(curr);\n        for(int i = start; i &lt; nums.size(); i++) {\n            curr.push_back(nums[i]);\n            dfs(nums, i + 1, res, curr);\n            curr.pop_back();\n        }\n    }\n};\n</code></pre>\n<h2 id=\"解法二：二进制计数\">解法二：二进制计数</h2>\n<h1 id=\"77-Combinations\"><a href=\"https://leetcode-cn.com/problems/combinations/\" target=\"_blank\" rel=\"noopener\">77. Combinations</a></h1>\n<p><a href=\"Array-Medium/image-20200516142130938.png\" title=\"image-20200516142130938\" class=\"gallery-item\"><img src=\"image-20200516142130938.png\" alt=\"image-20200516142130938\"></a></p>\n<h2 id=\"解法一：暴力回溯【超时】\">解法一：暴力回溯【超时】</h2>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; combine(int n, int k) {\n        vector&lt;vector&lt;int&gt;&gt; res;\n        combineN(n, k, 1, vector&lt;int&gt;(), res);\n        return res;\n    }\n\n    void combineN(int n, int k, int start, vector&lt;int&gt; curr, vector&lt;vector&lt;int&gt;&gt;&amp; res){\n        if(curr.size() == k) {\n            res.push_back(curr);\n            return;\n        }\n        for(int i = start; i &lt;= n; i++) {\n            curr.push_back(i);\n            combineN(n, k, i + 1, curr, res);\n            curr.pop_back();\n        }\n    }\n};\n</code></pre>\n<h3 id=\"优化剪枝【通过】\">优化剪枝【通过】</h3>\n<ul>\n<li>\n<p>由于是 n 选 k，当所以每次只需要搜到 n - (k - curr.size()) + 1处就足够了</p>\n</li>\n<li>\n<p>循环条件改为</p>\n</li>\n</ul>\n<pre><code class=\"language-cpp\">for(int i = start; i &lt;= n - (k - curr.size()) + 1; i++) {\n    // ...\n}\n</code></pre>\n<h2 id=\"解法二：二进制计数-v2\">解法二：二进制计数</h2>\n<h1 id=\"457-Circular-Array-Loop\"><a href=\"https://leetcode-cn.com/problems/circular-array-loop/\" target=\"_blank\" rel=\"noopener\">457. Circular Array Loop</a></h1>\n<p><a href=\"Array-Medium/image-20200517164411900.png\" title=\"image-20200517164411900\" class=\"gallery-item\"><img src=\"image-20200517164411900.png\" alt=\"image-20200517164411900\"></a></p>\n<h2 id=\"解法一：递归法\">解法一：递归法</h2>\n<p>错了最多次的一道题，吐了</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    const int INF = 1e8;\n    bool circularArrayLoop(vector&lt;int&gt;&amp; nums) {\n        for(int i = 0; i &lt; nums.size(); i++) {\n            bool dir = nums[i] &gt; 0 ? true : false;\n            if(detectCycle(nums, i, dir, nums.size()))\n                return true;\n        }\n        return false;\n    }\n\n    bool detectCycle(vector&lt;int&gt;&amp; nums, int idx, bool dir, int size) {\n        if(nums[idx] == 0) return false;\n        if(nums[idx] == INF) return true;\n        bool tdir = nums[idx] &gt; 0 ? true : false;\n        if(tdir == dir) {\n            int next = (size + (idx + nums[idx]) % size) % size;\n            nums[idx] = INF;\n            if(idx != next &amp;&amp; detectCycle(nums, next, dir, size))\n                return true;\n            else {\n                nums[idx] = 0;\n                return false;\n            }\n        }\n        return false;\n    }\n};\n</code></pre>\n<h1 id=\"209-Minimum-Size-Subarray-Sum\"><a href=\"https://leetcode-cn.com/problems/minimum-size-subarray-sum/\" target=\"_blank\" rel=\"noopener\">209. Minimum Size Subarray Sum</a></h1>\n<p><a href=\"Array-Medium/image-20200517171944389.png\" title=\"image-20200517171944389\" class=\"gallery-item\"><img src=\"image-20200517171944389.png\" alt=\"image-20200517171944389\"></a></p>\n<h2 id=\"解法一：滑动窗口\">解法一：滑动窗口</h2>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    int minSubArrayLen(int s, vector&lt;int&gt;&amp; nums) {\n        int start = 0, end = 0, len = nums.size(), min = INT32_MAX;\n        vector&lt;int&gt; sum(len + 1);\n        for(int i = 0; i &lt; len; i++)\n            sum[i + 1] += nums[i] + sum[i];\n\t\t\n        while(start &lt;= len &amp;&amp; end &lt;= len) {\n            int val = sum[end] - sum[start];\n            if(val &gt;= s) {\n                while(sum[end] - sum[start] &gt;= s)\n                    min = std::min(min, end - start++);\n            }\n            else end++;\n        }\n        return min == INT32_MAX ? 0 : min;\n    }\n};\n</code></pre>\n<h2 id=\"解法二：二分查找\">解法二：二分查找</h2>\n<ul>\n<li>复杂度不如解法一</li>\n<li>思路是对暴力法的优化，由于前缀和数组是递增的，所以把二重循环的第二层循环改成二分查找</li>\n</ul>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    int minSubArrayLen(int s, vector&lt;int&gt;&amp; nums) {\n        int len = nums.size(), min = INT32_MAX;\n        vector&lt;int&gt; sum(len + 1, 0);\n        for(int i = 0; i &lt; len; i++)\n            sum[i + 1] += nums[i] + sum[i];\n        for (int i = 1; i &lt;= len; i++) {\n            int to_find = s + sum[i - 1];\n            // 暴力for-loop 改成 lower_bound(s + sum[i - 1])\n            auto bound = lower_bound(sum.begin(), sum.end(), to_find);\n            if (bound != sum.end()) {\n                min = std::min(min, static_cast&lt;int&gt;(bound - (sum.begin() + i - 1)));\n            }\n        }\n        return min == INT32_MAX ? 0 : min;\n    }\n};\n</code></pre>\n<h1 id=\"390-Elimination-Game\"><a href=\"https://leetcode-cn.com/problems/elimination-game/\" target=\"_blank\" rel=\"noopener\">390. Elimination Game</a></h1>\n<p><a href=\"Array-Medium/image-20200517181325801.png\" title=\"image-20200517181325801\" class=\"gallery-item\"><img src=\"image-20200517181325801.png\" alt=\"image-20200517181325801\"></a></p>\n<h2 id=\"解法一：找规律\">解法一：找规律</h2>\n<ul>\n<li>\n<p>想象一个等差数列，初始首项为1，公差为1，每删一轮，数列长度减半，公差翻倍</p>\n</li>\n<li>\n<p>如果从左往右删 或 数组的长度为奇数，首项都会被删掉，其他情况则不会</p>\n</li>\n<li>\n<p>利用这个规律，如果是上一条中的情况，则<code>start = start + diff</code>，否则不变</p>\n</li>\n</ul>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    int lastRemaining(int n) {\n        return lastRemain(1, 1, n, true);\n    }\n\n    int lastRemain(int start, int diff, int len, bool left) {\n        if(len &lt;= 1) return start;\n        if(left || len % 2 != 0) start += diff; \n        return lastRemain(start, diff * 2, len / 2, !left);\n    }\n};\n</code></pre>\n<h1 id=\"152-Maximum-Product-Subarray\"><a href=\"https://leetcode-cn.com/problems/maximum-product-subarray/\" target=\"_blank\" rel=\"noopener\">152. Maximum Product Subarray</a></h1>\n<p><a href=\"Array-Medium/image-20200518011930210.png\" title=\"image-20200518011930210\" class=\"gallery-item\"><img src=\"image-20200518011930210.png\" alt=\"image-20200518011930210\"></a></p>\n<h2 id=\"解法一：DP-v3\">解法一：DP</h2>\n<p>又是子数组的题，这回的trick是</p>\n<ul>\n<li>维护两个变量，代表n为后缀的最大乘积和最小乘积</li>\n<li>如果nums[i]为正，我们自然需要最大乘积，否则需要最小乘积</li>\n<li>最大乘积如何更新？\n<ul>\n<li>取 nums[i]，max * nums[i]，min * nums[i] 中的最大者</li>\n</ul>\n</li>\n<li>最小乘积同理</li>\n</ul>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    int maxProduct(vector&lt;int&gt;&amp; nums) {\n        int Max = nums[0], Min = nums[0], res = nums[0];\n        for(int i = 1; i &lt; nums.size(); i++) {\n            int max = Max, min = Min;\n            Max = std::max(max * nums[i], std::max(nums[i], min * nums[i]));\n            Min = std::min(min * nums[i], std::min(nums[i], max * nums[i]));\n            res  = std::max(Max, res);\n        }\n        return res;\n    }\n};\n</code></pre>\n<h1 id=\"442-Find-All-Duplicates-in-an-Array\"><a href=\"https://leetcode-cn.com/problems/find-all-duplicates-in-an-array/\" target=\"_blank\" rel=\"noopener\">442. Find All Duplicates in an Array</a></h1>\n<p><a href=\"Array-Medium/image-20200523141928644.png\" title=\"image-20200523141928644\" class=\"gallery-item\"><img src=\"image-20200523141928644.png\" alt=\"image-20200523141928644\"></a></p>\n<h2 id=\"解法一：哈希\">解法一：哈希</h2>\n<p>不用说了</p>\n<h2 id=\"解法二\">解法二</h2>\n<ul>\n<li>\n<p>因为数值的范围在 1 - size 之间，所以需要找到一种方法在不影响值的情况下标记出已经出现的数字</p>\n</li>\n<li>\n<p>又因为全是正整数，所以为什么不用负号标记呢</p>\n</li>\n</ul>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    vector&lt;int&gt; findDuplicates(vector&lt;int&gt;&amp; nums) {\n        vector&lt;int&gt; res;\n        for(int i = 0; i &lt; nums.size(); i++) {\n            int val = abs(nums[i]);\n            if (nums[val - 1] &gt; 0)\n                nums[val - 1] *= -1;\n            else\n                res.push_back(val);\n        }\n        return res;\n    }\n};\n</code></pre>\n</div><script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);\n        }</script>","more":"<h1 id=\"16-3Sum-Closest\"><a href=\"https://leetcode-cn.com/problems/3sum-closest/\" target=\"_blank\" rel=\"noopener\">16. 3Sum Closest</a></h1>\n<p><a href=\"Array-Medium/image-20200427215132211.png\" title=\"image-20200427215132211\" class=\"gallery-item\"><img src=\"image-20200427215132211.png\" alt=\"image-20200427215132211\"></a></p>\n<h2 id=\"解法一：暴力法\">解法一：暴力法</h2>\n<p>遍历所有可能的3组数，求最接近的sum</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    int threeSumClosest(vector&lt;int&gt;&amp; nums, int target) {\n        int min = INT32_MAX, res = min;\n        for(int i = 0; i&lt;nums.size(); i++){\n            for(int j = i + 1; j&lt;nums.size(); j++){\n                for(int k = j + 1; k&lt;nums.size(); k++){\n                    int sum = nums[i] + nums[j] + nums[k];\n                    int val = std::abs(sum - target);\n                    if(val == 0) return sum;\n                    if(val &lt; min){\n                        min = val;\n                        res = sum;\n                    }\n                }\n            }\n        }\n        return res;\n    }\n};\n</code></pre>\n<h2 id=\"解法二：排序-双指针\">解法二：排序+双指针</h2>\n<p>还记得两数之和那题是靠双指针做的，这题也可以，但是要固定一个数，而且这个数必须从小到大变化，所以先排序，然后就转换成两数之和了</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    int threeSumClosest(vector&lt;int&gt;&amp; nums, int target) {\n        int min = INT32_MAX, res = min;\n        std::sort(nums.begin(), nums.end());\n        for(int i = 0; i&lt;nums.size(); i++){\n            int lo = i + 1, hi = nums.size() - 1;\n            while(lo &lt; hi){\n                int sum = nums[i] + nums[lo] + nums[hi];\n                int val = std::abs(sum - target);\n                if (val &lt; min) {\n                    res = sum;\n                    min = val;\n                }\n                if(sum &lt; target) lo++;\n                else if(sum &gt; target) hi--;\n                else return res;\n            }\n        }\n        return res;\n    }\n};\n</code></pre>\n<h1 id=\"15-3Sum\"><a href=\"https://leetcode-cn.com/problems/3sum/\" target=\"_blank\" rel=\"noopener\">15. 3Sum</a></h1>\n<p><a href=\"Array-Medium/image-20200429140647649.png\" title=\"image-20200429140647649\" class=\"gallery-item\"><img src=\"image-20200429140647649.png\" alt=\"image-20200429140647649\"></a></p>\n<h2 id=\"解法一：排序-双指针\">解法一：排序 + 双指针</h2>\n<p>同上题，暴力解就不写了，这题的坑点在去重，因为要求<strong>unique triplets</strong></p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n\tvector&lt;vector&lt;int&gt;&gt; threeSum(vector&lt;int&gt;&amp; nums) {\n\t\tstd::vector&lt;vector&lt;int&gt;&gt; res;\n\t\tif (nums.size() &lt; 3) return res;\n\t\tstd::sort(nums.begin(), nums.end());\n\n\t\tfor (int i = 0; i &lt; nums.size() - 2; i++) {\n\t\t\tif (nums[i] &gt; 0) return res;\n\t\t\tif (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1]) continue;\n\t\t\tint lo = i + 1, hi = nums.size() - 1;\n\t\t\twhile (lo &lt; hi) {\n\t\t\t\tint sum = nums[i] + nums[lo] + nums[hi];\n\t\t\t\tif (sum == 0) {\n\t\t\t\t\tres.push_back({ nums[i], nums[lo], nums[hi] });\n\t\t\t\t\twhile (lo &lt; hi &amp;&amp; nums[lo] == nums[lo + 1]) lo++;\n\t\t\t\t\twhile (lo &lt; hi &amp;&amp; nums[hi] == nums[hi - 1]) hi--;\n\t\t\t\t\tlo++;\n\t\t\t\t\thi--;\n\t\t\t\t}\n\t\t\t\telse if (sum &gt; 0)\n\t\t\t\t\thi--;\n\t\t\t\telse\n\t\t\t\t\tlo++;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n};\n</code></pre>\n<h1 id=\"18-4Sum\"><a href=\"https://leetcode-cn.com/problems/4sum/\" target=\"_blank\" rel=\"noopener\">18. 4Sum</a></h1>\n<p><a href=\"Array-Medium/image-20200429143922947.png\" title=\"image-20200429143922947\" class=\"gallery-item\"><img src=\"image-20200429143922947.png\" alt=\"image-20200429143922947\"></a></p>\n<h2 id=\"解法一：同上\">解法一：同上</h2>\n<p>同上，好像只能套一层双指针的样子，复杂度依然有n^3</p>\n<p>另外由于target可以为负数，所以nums[i] &gt; target  &amp; nums[i] + nums[j] &gt; target 就 return 的好性质就没了</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n\tvector&lt;vector&lt;int&gt;&gt; fourSum(vector&lt;int&gt;&amp; nums, int target) {\n\t\tvector&lt;vector&lt;int&gt;&gt; res;\n\t\tif (nums.size() &lt; 4) return res;\n\t\tstd::sort(nums.begin(), nums.end());\n\n\t\tfor (int i = 0; i &lt; nums.size() - 3; i++) {\n\t\t\tif (i &gt; 0 &amp;&amp; nums[i] == nums[i - 1]) continue;\n\t\t\tfor (int j = i + 1; j &lt; nums.size() - 2; j++) {\n\t\t\t\tif (j &gt; i + 1 &amp;&amp; nums[j] == nums[j - 1]) continue;\n\t\t\t\tint lo = j + 1, hi = nums.size() - 1;\n\t\t\t\twhile (lo &lt; hi) {\n\t\t\t\t\tint sum = nums[i] + nums[j] + nums[lo] + nums[hi];\n\t\t\t\t\tif (sum == target) {\n\t\t\t\t\t\tres.push_back({ nums[i],nums[j],nums[lo],nums[hi] });\n\t\t\t\t\t\twhile (lo &lt; hi &amp;&amp; nums[lo] == nums[lo + 1]) lo++;\n\t\t\t\t\t\twhile (lo &lt; hi &amp;&amp; nums[hi] == nums[hi - 1]) hi--;\n\t\t\t\t\t\tlo++;\n\t\t\t\t\t\thi--;\n\t\t\t\t\t}\n\t\t\t\t\telse if (sum &gt; target) hi--;\n\t\t\t\t\telse if (sum &lt; target) lo++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n};\n</code></pre>\n<h1 id=\"48-Rotate-Image\"><a href=\"https://leetcode-cn.com/problems/rotate-image/\" target=\"_blank\" rel=\"noopener\">48. Rotate Image</a></h1>\n<p><a href=\"Array-Medium/image-20200430144224282.png\" title=\"image-20200430144224282\" class=\"gallery-item\"><img src=\"image-20200430144224282.png\" alt=\"image-20200430144224282\"></a></p>\n<p><a href=\"Array-Medium/image-20200430144236162.png\" title=\"image-20200430144236162\" class=\"gallery-item\"><img src=\"image-20200430144236162.png\" alt=\"image-20200430144236162\"></a></p>\n<h2 id=\"解法一：先转置再求反\">解法一：先转置再求反</h2>\n<p>一开始以为是转置，结果发现刚好反过来，那就再求一次reverse就好了，但是直觉上就知道这样有点先降温再烧水的意味</p>\n<ul>\n<li>注意交换的时候只交换上三角</li>\n</ul>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    void rotate(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {\n        int row = matrix.size(), col = matrix[0].size();\n        for (int i = 0; i &lt; row; i++) {\n            for (int j = i + 1; j &lt; col; j++) {\n                int tmp = matrix[i][j];\n                matrix[i][j] = matrix[j][i];\n                matrix[j][i] = tmp;\n            }\n        }\n        for (vector&lt;int&gt;&amp; v : matrix) {\n            std::reverse(v.begin(), v.end());\n        }\n    }\n};\n</code></pre>\n<h2 id=\"解法二：旋转变换\">解法二：旋转变换</h2>\n<p>反正我是没想出来，抄答案的</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    void rotate(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {\n        int n = matrix.size();\n        for (int i = 0; i &lt; (n + 1) / 2; i++) {\n            for (int j = 0; j &lt; n / 2; j++) {\n                int temp = matrix[n - 1 - j][i];\n                matrix[n - 1 - j][i] = matrix[n - 1 - i][n - j - 1];\n                matrix[n - 1 - i][n - j - 1] = matrix[j][n - 1 - i];\n                matrix[j][n - 1 - i] = matrix[i][j];\n                matrix[i][j] = temp;\n            }\n        }\n    }\n};\n</code></pre>\n<h1 id=\"36-Valid-Sudoku\"><a href=\"https://leetcode-cn.com/problems/valid-sudoku/\" target=\"_blank\" rel=\"noopener\">36. Valid Sudoku</a></h1>\n<p><a href=\"Array-Medium/image-20200430171033116.png\" title=\"image-20200430171033116\" class=\"gallery-item\"><img src=\"image-20200430171033116.png\" alt=\"image-20200430171033116\"></a></p>\n<p><a href=\"Array-Medium/image-20200430171047297.png\" title=\"image-20200430171047297\" class=\"gallery-item\"><img src=\"image-20200430171047297.png\" alt=\"image-20200430171047297\"></a></p>\n<p><a href=\"Array-Medium/image-20200430171056746.png\" title=\"image-20200430171056746\" class=\"gallery-item\"><img src=\"image-20200430171056746.png\" alt=\"image-20200430171056746\"></a></p>\n<h2 id=\"解法一：暴力法（三次遍历）\">解法一：暴力法（三次遍历）</h2>\n<p>依次按行遍历，按列遍历，按九宫格遍历，用unordered_map记录出现的数字的次数，每轮超过一次算错</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n\tbool isValidSudoku(vector&lt;vector&lt;char&gt;&gt;&amp; board) {\n\t\tunordered_map&lt;char, int&gt; map;\n\t\tfor (int i = 0; i &lt; board.size(); i++) {\n\t\t\tmap.clear();\n\t\t\tfor (int j = 0; j &lt; board[0].size(); j++) {\n\t\t\t\tint count = map[board[i][j]]++;\n\t\t\t\tif (isdigit(board[i][j]) &amp;&amp; count &gt; 0)\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (int i = 0; i &lt; board.size(); i++) {\n\t\t\tmap.clear();\n\t\t\tfor (int j = 0; j &lt; board[0].size(); j++) {\n\t\t\t\tint count = map[board[j][i]]++;\n\t\t\t\tif (isdigit(board[j][i]) &amp;&amp; count &gt; 0)\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (int i = 0; i &lt; 3; i++) {\n\t\t\tfor (int j = 0; j &lt; 3; j++) {\n\t\t\t\tmap.clear();\n\t\t\t\tfor (int m = i * 3; m &lt; i * 3 + 3; m++) {\n\t\t\t\t\tfor (int n = j * 3; n &lt; j * 3 + 3; n++) {\n\t\t\t\t\t\tint count = map[board[m][n]]++;\n\t\t\t\t\t\tif (isdigit(board[m][n]) &amp;&amp; count &gt; 0)\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n};\n</code></pre>\n<h2 id=\"解法二：一次遍历\">解法二：一次遍历</h2>\n<p>其实可以一次遍历，前提是要知道在哪行哪列哪个box</p>\n<p>因为只有9个数，哈希容器也可以换成bool数组</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    bool isValidSudoku(vector&lt;vector&lt;char&gt;&gt;&amp; board) {\n        bool row[9][9] = { false }, col[9][9] = { false }, box[9][9] = { false };\n        for (int i = 0; i &lt; 9; i++) {\n            for (int j = 0; j &lt; 9; j++) {\n                if (board[i][j] == '.') continue;\n                int box_idx = (i / 3) * 3 + j / 3;\n                int val = board[i][j] - '1';\n                if (row[i][val] || col[j][val] || box[box_idx][val])\n                    return false;\n                row[i][val] = col[j][val] = box[box_idx][val] = true;\n            }\n        }\n        return true;\n    }\n};\n</code></pre>\n<h1 id=\"54-Spiral-Matrix\"><a href=\"https://leetcode-cn.com/problems/spiral-matrix/\" target=\"_blank\" rel=\"noopener\">54. Spiral Matrix</a></h1>\n<p><a href=\"Array-Medium/image-20200430235816762.png\" title=\"image-20200430235816762\" class=\"gallery-item\"><img src=\"image-20200430235816762.png\" alt=\"image-20200430235816762\"></a></p>\n<h2 id=\"解法一：标记访问点\">解法一：标记访问点</h2>\n<p>按顺序向右，向下，向左，向上，直到”撞墙“，需要“预判”，当下一个被访问过或要越界的时候就转向</p>\n<p>这里有点投机取巧，用INT32_MAX作标记，而且直接修改了原数组脏了数据</p>\n<p>替代方案是开另一个等大的数组来记录是否被访问过，但我懒得改了（ 就这样吧（</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    vector&lt;int&gt; spiralOrder(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {\n        if (matrix.empty()) return {};\n        int row = matrix.size(), col = matrix[0].size();\n        vector&lt;int&gt; sp = vector&lt;int&gt;(row * col);\n        int num = 0, tot = row * col, x, y;\n        sp[0] = matrix[y = 0][x = 0];\n        matrix[0][0] = INT32_MAX;\n        while (num &lt; tot - 1) {\n            while (x &lt; col - 1 &amp;&amp; INT32_MAX != matrix[y][x + 1]) { sp[++num] = matrix[y][++x]; matrix[y][x] = INT32_MAX; }\n            while (y &lt; row - 1 &amp;&amp; INT32_MAX != matrix[y + 1][x]) { sp[++num] = matrix[++y][x]; matrix[y][x] = INT32_MAX; }\n            while (x &gt; 0 &amp;&amp; INT32_MAX != matrix[y][x - 1]) { sp[++num] = matrix[y][--x]; matrix[y][x] = INT32_MAX; }\n            while (y &gt; 0 &amp;&amp; INT32_MAX != matrix[y - 1][x]) { sp[++num] = matrix[--y][x]; matrix[y][x] = INT32_MAX; }\n        }\n        return sp;\n    }\n};\n</code></pre>\n<h1 id=\"59-Spiral-Matrix-II\"><a href=\"https://leetcode-cn.com/problems/spiral-matrix-ii/\" target=\"_blank\" rel=\"noopener\">59. Spiral Matrix II</a></h1>\n<p><a href=\"Array-Medium/image-20200501001955053.png\" title=\"image-20200501001955053\" class=\"gallery-item\"><img src=\"image-20200501001955053.png\" alt=\"image-20200501001955053\"></a></p>\n<h2 id=\"解法一：紫书原题好吧\">解法一：紫书原题好吧</h2>\n<p>做法同54题 <code>Spiral Matrix</code>，比起Ⅰ甚至不需要标记访问点了，更简单了</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; generateMatrix(int n) {\n        if(n == 0) return {};\n        int size = n * n, tot = 1, x, y;\n        vector&lt;vector&lt;int&gt;&gt; map = vector&lt;vector&lt;int&gt;&gt;(n);\n        for(vector&lt;int&gt;&amp; v : map) v = vector&lt;int&gt;(n);\n        map[x = 0][y = 0] = 1;\n        while(tot &lt; size){\n            while(x + 1 &lt; n &amp;&amp; !map[y][x+1]) map[y][++x] = ++tot;\n            while(y + 1 &lt; n &amp;&amp; !map[y+1][x]) map[++y][x] = ++tot;\n            while(x &gt; 0 &amp;&amp; !map[y][x-1]) map[y][--x] = ++tot;\n            while(y &gt; 0 &amp;&amp; !map[y-1][x]) map[--y][x] = ++tot;\n        }\n        return map;\n    }\n};\n</code></pre>\n<h1 id=\"73-Set-Matrix-Zeroes\"><a href=\"https://leetcode-cn.com/problems/set-matrix-zeroes/\" target=\"_blank\" rel=\"noopener\">73. Set Matrix Zeroes</a></h1>\n<p><a href=\"Array-Medium/image-20200501003723728.png\" title=\"image-20200501003723728\" class=\"gallery-item\"><img src=\"image-20200501003723728.png\" alt=\"image-20200501003723728\"></a></p>\n<h2 id=\"解法一：暴力法-v2\">解法一：暴力法</h2>\n<p>先遍历一次记下所有0元素的行数和列数，然后重新遍历一次把对应的行和列置零，空间复杂度O(m + n)</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    void setZeroes(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {\n        unordered_set&lt;int&gt; row, col;\n        for(int i = 0;i&lt;matrix.size();i++){\n            for(int j = 0;j&lt;matrix[0].size();j++){\n                if(matrix[i][j] == 0){\n                    row.emplace(i);\n                    col.emplace(j);\n                }\n            }\n        }\n\n        for(int i = 0;i&lt;matrix.size();i++){\n            for(int j = 0;j&lt;matrix[0].size();j++){\n                if(row.find(i) != row.end() || col.find(j) != col.end())\n                    matrix[i][j] = 0;\n            }\n        }\n    }\n};\n</code></pre>\n<h2 id=\"解法二：\">解法二：</h2>\n<h1 id=\"1424-Diagonal-Traverse-II\"><a href=\"https://leetcode-cn.com/problems/diagonal-traverse-ii/\" target=\"_blank\" rel=\"noopener\">1424. Diagonal Traverse II</a></h1>\n<p><a href=\"Array-Medium/image-20200501120709959.png\" title=\"image-20200501120709959\" class=\"gallery-item\"><img src=\"image-20200501120709959.png\" alt=\"image-20200501120709959\"></a></p>\n<p><a href=\"Array-Medium/image-20200501120721893.png\" title=\"image-20200501120721893\" class=\"gallery-item\"><img src=\"image-20200501120721893.png\" alt=\"image-20200501120721893\"></a></p>\n<p><a href=\"Array-Medium/image-20200501120732859.png\" title=\"image-20200501120732859\" class=\"gallery-item\"><img src=\"image-20200501120732859.png\" alt=\"image-20200501120732859\"></a></p>\n<h2 id=\"解法一：顺序遍历\">解法一：顺序遍历</h2>\n<p>学过初中数学都知道，直线上 x + y = c (c为常数)，依照这个性质就可以用正常的遍历顺序取到每一层反向的结果，最后再反向存入一个新的res数组就行了</p>\n<ul>\n<li>顺带一提，由于i,j的规模达到10^9，暴力法是不可行的，会超时，即使是顺序遍历也要500ms上下</li>\n</ul>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    vector&lt;int&gt; findDiagonalOrder(vector&lt;vector&lt;int&gt;&gt;&amp; nums) {\n        vector&lt;vector&lt;int&gt;&gt; map;\n        for(int i = 0;i &lt; nums.size(); i++){\n            for(int j = 0; j &lt; nums[i].size(); j++){\n                int idx = i + j;\n                if(idx &gt;= map.size()) map.push_back({});\n                map[idx].push_back(nums[i][j]);\n            }\n        }\n        vector&lt;int&gt; res;\n        for(int i = 0;i&lt;map.size();i++){\n            for(int j = map[i].size() - 1; j&gt;-1;j--){\n                res.push_back(map[i][j]);\n            }\n        }\n        return res;\n    }\n};\n</code></pre>\n<h1 id=\"56-Merge-Intervals\"><a href=\"https://leetcode-cn.com/problems/merge-intervals/\" target=\"_blank\" rel=\"noopener\">56. Merge Intervals</a></h1>\n<p><a href=\"Array-Medium/image-20200501140513629.png\" title=\"image-20200501140513629\" class=\"gallery-item\"><img src=\"image-20200501140513629.png\" alt=\"image-20200501140513629\"></a></p>\n<h2 id=\"解法一：先排序\">解法一：先排序</h2>\n<p>按左端点排序，那么判断重合就好办了</p>\n<ul>\n<li>只要下一个区间的左端点小于等于这个区间的右端点，就修改这个区间的左右端点</li>\n<li>如果不重合，就直接push下一个区间，同时指向下一个区间</li>\n</ul>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; merge(vector&lt;vector&lt;int&gt;&gt;&amp; intervals) {\n        if(intervals.size() &lt;= 1) return intervals;\n        std::sort(intervals.begin(),intervals.end(),[](vector&lt;int&gt; a, vector&lt;int&gt; b){\n            return a[0] &lt; b[0];\n        });\n        vector&lt;vector&lt;int&gt;&gt; res;\n        int i = 0, j = 1;\n        res.push_back(intervals[0]);\n        while(j &lt; intervals.size()) {\n            if(intervals[j][0] &lt;= res[i][1]){\n                res[i][0] = std::min(res[i][0], intervals[j][0]);\n                res[i][1] = std::max(res[i][1], intervals[j][1]);\n                j++;\n            }\n            else{\n                res.push_back(intervals[j]);\n                i++;\n            }   \n        }\n        return res;\n    }\n};\n</code></pre>\n<p>原来vector可以默认按第一位排序。。删掉lambda比较函数后，快了不少。。</p>\n<pre><code class=\"language-cpp\">std::sort(intervals.begin(),intervals.end());\n</code></pre>\n<h1 id=\"228-Summary-Ranges\"><a href=\"https://leetcode-cn.com/problems/summary-ranges/\" target=\"_blank\" rel=\"noopener\">228. Summary Ranges</a></h1>\n<p><a href=\"Array-Medium/image-20200506185521306.png\" title=\"image-20200506185521306\" class=\"gallery-item\"><img src=\"image-20200506185521306.png\" alt=\"image-20200506185521306\"></a></p>\n<h2 id=\"解法一：一次性遍历\">解法一：一次性遍历</h2>\n<p>就这？</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    vector&lt;string&gt; summaryRanges(vector&lt;int&gt;&amp; nums) {\n        if(nums.empty()) return {};\n        vector&lt;string&gt; res;\n        int start = 0, end = 0;\n        for(int i = 0; i &lt; nums.size() - 1; i++) {\n            if(nums[i] != nums[i + 1] - 1) {\n                end = i;\n                if(start == end) \n                    res.push_back(to_string(nums[end]));\n                else\n                    res.push_back(to_string(nums[start]) + &quot;-&gt;&quot; + to_string(nums[end]));\n                start = end + 1;\n            } \n        }\n        end = nums.size() - 1;\n        if(start == end) \n            res.push_back(to_string(nums[end]));\n        else\n            res.push_back(to_string(nums[start]) + &quot;-&gt;&quot; + to_string(nums[end]));\n        return res;\n    }\n};\n</code></pre>\n<h1 id=\"1277-Count-Square-Submatrices-with-All-Ones\"><a href=\"https://leetcode-cn.com/problems/count-square-submatrices-with-all-ones/\" target=\"_blank\" rel=\"noopener\">1277. Count Square Submatrices with All Ones</a></h1>\n<p><a href=\"Array-Medium/image-20200506191826850.png\" title=\"image-20200506191826850\" class=\"gallery-item\"><img src=\"image-20200506191826850.png\" alt=\"image-20200506191826850\"></a></p>\n<h2 id=\"解法一：DP\">解法一：DP</h2>\n<p>同上题</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    int countSquares(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) {\n        if(matrix.empty() || matrix[0].empty()) return 0;\n        vector&lt;vector&lt;int&gt;&gt; dp(matrix.size(), vector&lt;int&gt;(matrix[0].size()));\n        int res = 0;\n        for (int i = 0; i &lt; matrix.size(); i++) {\n            for (int j = 0; j &lt; matrix[0].size(); j++) {\n                if (matrix[i][j] == 1) {\n                    if (i == 0 || j == 0) \n                        res += dp[i][j] = 1;\n                    else\n                        res += dp[i][j] = std::min(dp[i - 1][j], std::min(dp[i][j - 1], dp[i - 1][j - 1])) + 1;\n                }\n            }\n        }\n        return res;\n    }\n};\n</code></pre>\n<h1 id=\"215-Kth-Largest-Element-in-an-Array\"><a href=\"https://leetcode-cn.com/problems/kth-largest-element-in-an-array/\" target=\"_blank\" rel=\"noopener\">215. Kth Largest Element in an Array</a></h1>\n<p><a href=\"Array-Medium/image-20200506210330951.png\" title=\"image-20200506210330951\" class=\"gallery-item\"><img src=\"image-20200506210330951.png\" alt=\"image-20200506210330951\"></a></p>\n<h2 id=\"解法一：排序\">解法一：排序</h2>\n<p>可以，但是没必要</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    int findKthLargest(vector&lt;int&gt;&amp; nums, int k) {\n        std::sort(nums.begin(), nums.end(), greater&lt;int&gt;());\n        return nums[k - 1];\n    }\n};\n</code></pre>\n<h2 id=\"解法二：小根堆\">解法二：小根堆</h2>\n<p>但是需要辅助空间，而且只求前k时也不是效率最高的，因为本质上还是排了前k的序</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    int findKthLargest(vector&lt;int&gt;&amp; nums, int k) {\n        priority_queue&lt;int&gt; q;\n        for(int i = 0; i &lt; nums.size(); i++) {\n        \tq.push(nums[i]);\n            if(q.size() &gt; k) q.pop();\n        }\n        return q.top();\n    }\n};\n</code></pre>\n<h2 id=\"解法三：快速选择\">解法三：快速选择</h2>\n<p>相当于一个阉割版的快排，为了去掉一些快排中在这个问题下的冗余操作</p>\n<ul>\n<li>快排中每轮排序都能取得一个数在排序数组中的最终位置</li>\n<li>题目要求的是第k大的数，也就是最终位置为 size - k + 1，索引为size - k的元素</li>\n<li>如果一轮排序找到的索引大于size - k，那就只向下继续排，否则向上排，直到刚好等于size - k</li>\n<li>时间复杂度来到O(n)</li>\n</ul>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    int partition(vector&lt;int&gt; &amp;nums, int left, int right) {\n        swap(nums[left], nums[rand() % (right - left + 1) + left]); // \n        int pivot = nums[left];\n        int hi = left;\n        for (int lo = left + 1; lo &lt;= right; lo++) {\n            if (nums[lo] &lt; pivot) {\n                swap(nums[lo], nums[++hi]);\n            }\n        }\n        swap(nums[left], nums[hi]);\n        return hi;\n    }\n\n    int findKthLargest(vector&lt;int&gt; &amp;nums, int k) {\n        int target = nums.size() - k;\n        int lo = 0, hi = nums.size() - 1;\n        while (lo &lt;= hi) {\n            int res = partition(nums, lo, hi);\n            if(res == target) return nums[res];\n            else if(res &lt; target) lo = res + 1;\n            else hi = res - 1;\n        }\n        return -1;\n    }\n};\n</code></pre>\n<h1 id=\"229-Majority-Element-II\"><a href=\"https://leetcode-cn.com/problems/majority-element-ii/\" target=\"_blank\" rel=\"noopener\">229. Majority Element II</a></h1>\n<p><a href=\"Array-Medium/image-20200508012701656.png\" title=\"image-20200508012701656\" class=\"gallery-item\"><img src=\"image-20200508012701656.png\" alt=\"image-20200508012701656\"></a></p>\n<h2 id=\"解法一：排序-哈希\">解法一：排序 &amp; 哈希</h2>\n<p>排序可以一次统计同一个数字，哈希可以直接统计每个数字</p>\n<p>但是前者时间复杂度O(nlogn)，后者空间复杂度O(n)，都不满足要求，也很简单就不贴了</p>\n<h2 id=\"解法二：摩尔投票法\">解法二：摩尔投票法</h2>\n<p>摩尔投票法的图形化理解请参考<a href=\"https://leetcode-cn.com/problems/majority-element-ii/solution/cong-zhu-xing-tu-jiao-chao-ji-su-li-jie-wei-shi-ya/\" target=\"_blank\" rel=\"noopener\">从柱状图角度理解</a></p>\n<ul>\n<li>对于出现超过 n / m 次的众数，最多有 m -  1 个，本题显然最多只能有两个存在</li>\n<li>用摩尔投票法考虑两个候选人，这两个就是出现次数最多的两个</li>\n<li>但是出现次数最多不代表超过 n / 3 ，所以求得候选数之后还要遍历一次来验证是否正确</li>\n<li>另外侯选数可能重复，记得去重</li>\n</ul>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    vector&lt;int&gt; majorityElement(vector&lt;int&gt;&amp; nums) {\n        if(nums.empty()) return {};\n        int cand1 = nums[0], cand2 = nums[0];\n        int cnt1 = 0, cnt2 = 0;\n        for(int i : nums) {\n            if(i == cand1) cnt1++;\n            else if(i == cand2) cnt2++;\n            else if(cnt1 == 0) {\n                cnt1 = 1;\n                cand1 = i;\n            }\n            else if(cnt2 == 0) {\n                cnt2 = 1;\n                cand2 = i;\n            }\n            else {\n                cnt1--; cnt2--;\n            }\n        }\n        cnt1 = 0, cnt2 = 0;\n        for(int i : nums) {\n            if(i == cand1) cnt1++;\n            if(i == cand2) cnt2++;\n        }\n        vector&lt;int&gt; res;\n        if(cnt1 &gt; nums.size() / 3) res.push_back(cand1);\n        if(cand2 != cand1 &amp;&amp; cnt2 &gt; nums.size() / 3) res.push_back(cand2);\n        return res;\n\n    }\n};\n</code></pre>\n<h1 id=\"220-Contains-Duplicate-III\"><a href=\"https://leetcode-cn.com/problems/contains-duplicate-iii/\" target=\"_blank\" rel=\"noopener\">220. Contains Duplicate III</a></h1>\n<p><a href=\"Array-Medium/image-20200508014707098.png\" title=\"image-20200508014707098\" class=\"gallery-item\"><img src=\"image-20200508014707098.png\" alt=\"image-20200508014707098\"></a></p>\n<h2 id=\"解法一：暴力法-v3\">解法一：暴力法</h2>\n<p>超时，但是如果面向测试用例编程倒是可以 😅</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    bool containsNearbyAlmostDuplicate(vector&lt;int&gt;&amp; nums, int k, int t) {\n        // if (k == 10000) return false; 加上这句可以暴力法通过99.9%\n        int max_t = -1, max_k = -1;\n        for(int i = 0; i &lt; nums.size(); i++) {\n            for(int j = i + 1; j &lt; nums.size(); j++) {\n                if (abs((long)nums[i] - (long)nums[j]) &lt;= t &amp;&amp; abs(i - j) &lt;= k)\n                    return true;\n            }\n        }\n        return false;\n    }\n};\n</code></pre>\n<h2 id=\"解法二：排序\">解法二：排序</h2>\n<p>显然如果有序的话，就能在线性时间内解决，但是排序会丢掉索引</p>\n<h1 id=\"274-H-Index\"><a href=\"https://leetcode-cn.com/problems/h-index/\" target=\"_blank\" rel=\"noopener\">274. H-Index</a></h1>\n<p><a href=\"Array-Medium/image-20200511143753045.png\" title=\"image-20200511143753045\" class=\"gallery-item\"><img src=\"image-20200511143753045.png\" alt=\"image-20200511143753045\"></a></p>\n<h2 id=\"解法一：直接排序\">解法一：直接排序</h2>\n<p>题意是对于所有n来说求不小于num[i]的个数的最大值，那么排序是个很显然的思路</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    int hIndex(vector&lt;int&gt;&amp; citations) {\n        std::sort(citations.begin(), citations.end(), greater&lt;int&gt;());\n        int res = 0;\n        for(int i = 0; i &lt; citations.size(); i++) {\n            if(citations[i] &gt;= i + 1) res = std::max(res, i + 1);\n        }\n        return res;\n    }\n};\n</code></pre>\n<h2 id=\"解法二：计数排序\">解法二：计数排序</h2>\n<h1 id=\"300-Longest-Increasing-Subsequence\"><a href=\"https://leetcode-cn.com/problems/longest-increasing-subsequence/\" target=\"_blank\" rel=\"noopener\">300. Longest Increasing Subsequence</a></h1>\n<p><a href=\"Array-Medium/image-20200511213352059.png\" title=\"image-20200511213352059\" class=\"gallery-item\"><img src=\"image-20200511213352059.png\" alt=\"image-20200511213352059\"></a></p>\n<h2 id=\"解法一：DP-v2\">解法一：DP</h2>\n<ul>\n<li>\n<p>构造一个前缀最大长度数组DP</p>\n</li>\n<li>\n<p>转移方程显然是</p>\n<pre><code class=\"language-cpp\">dp[i] = max(dp[j] + 1, dp[i]); // j &lt; i 且 nums[j] &lt; nums[i]\n</code></pre>\n</li>\n</ul>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    int lengthOfLIS(vector&lt;int&gt;&amp; nums) {\n        if(nums.empty()) return 0;\n        vector&lt;int&gt; dp(nums.size(), 1);\n        int max = 1;\n        for(int i = 1; i &lt; nums.size(); i++) {\n            for(int j = 0; j &lt; i;j++) {\n                if(nums[i] &gt; nums[j]) {\n                    dp[i] = std::max(dp[j] + 1, dp[i]);\n                }\n            }\n            max = std::max(max, dp[i]);\n        }\n        return max;\n    }\n};\n</code></pre>\n<h2 id=\"解法二：贪心\">解法二：贪心</h2>\n<h1 id=\"238-Product-of-Array-Except-Self\"><a href=\"https://leetcode-cn.com/problems/product-of-array-except-self/\" target=\"_blank\" rel=\"noopener\">238. Product of Array Except Self</a></h1>\n<p><a href=\"Array-Medium/image-20200513144756662.png\" title=\"image-20200513144756662\" class=\"gallery-item\"><img src=\"image-20200513144756662.png\" alt=\"image-20200513144756662\"></a></p>\n<h2 id=\"解法一：前缀积-后缀积\">解法一：前缀积 &amp; 后缀积</h2>\n<p>这题本来求出总的积再分别除数组的各位就可以解决（而且是线性时间 + 常数空间），但是题目要求不能使用除法，第一时间想到的就是这个</p>\n<p>也就是除自己以外的乘积等价于左边的乘积 * 右边的乘积，那用数组把对应的前缀积和后缀积记下来再相乘填入就行了</p>\n<p>但是题目还要求常数空间，而现在用了8n个额外字节，下一步应该是把两个数组优化成两个变量</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    vector&lt;int&gt; productExceptSelf(vector&lt;int&gt;&amp; nums) {\n        int len = nums.size();\n        vector&lt;int&gt; prefix(len, 1), suffix(len, 1);\n        prefix[0] = nums[0], suffix[len - 1] = nums[len - 1];\n        for(int i = 1; i &lt; len; i++) {\n            prefix[i] = prefix[i - 1] * nums[i];\n            suffix[len - i - 1] = suffix[len - i] * nums[len - i - 1];\n        }\n\n        vector&lt;int&gt; res(len);\n        for(int i = 1; i &lt; len - 1; i++) {\n            res[i] = suffix[i + 1] * prefix[i - 1];\n        }\n        res[0] = suffix[1], res[len - 1] = prefix[len - 2];\n        return res;\n    }\n};\n</code></pre>\n<p><strong>优化辅助空间</strong></p>\n<ul>\n<li>先从左往右遍历，让各位乘以对应的前缀积</li>\n<li>再从右往左遍历，各位乘以后缀积</li>\n</ul>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    vector&lt;int&gt; productExceptSelf(vector&lt;int&gt;&amp; nums) {\n        int len = nums.size();\n        vector&lt;int&gt; res(len, 1);\n        int prefix = 1, suffix = 1;\n        for(int i = 1; i &lt; len; i++) {\n            prefix *= nums[i - 1];\n            res[i] *= prefix;\n        }\n\n        for(int i = len - 2; i &gt; -1; i--) {\n            suffix *= nums[i + 1];\n            res[i] *= suffix;\n        }\n        res[0] = suffix, res[len - 1] = prefix;\n\n        return res;\n    }\n};\n</code></pre>\n<p><strong>实际上只需要一次遍历</strong></p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    vector&lt;int&gt; productExceptSelf(vector&lt;int&gt;&amp; nums) {\n        int len = nums.size();\n        vector&lt;int&gt; res(len, 1);\n        int prefix = 1, suffix = 1;\n        for(int i = 0; i &lt; len; i++) {\n            res[i] *= prefix;\n            res[len - i - 1] *= suffix;\n            prefix *= nums[i];\n            suffix *= nums[len - i - 1];\n        }\n        return res;\n    }\n};\n</code></pre>\n<h1 id=\"216-Combination-Sum-III\"><a href=\"https://leetcode-cn.com/problems/combination-sum-iii/\" target=\"_blank\" rel=\"noopener\">216. Combination Sum III</a></h1>\n<p><a href=\"Array-Medium/image-20200513155456262.png\" title=\"image-20200513155456262\" class=\"gallery-item\"><img src=\"image-20200513155456262.png\" alt=\"image-20200513155456262\"></a></p>\n<h2 id=\"解法一：回溯法\">解法一：回溯法</h2>\n<p>注意只能取 0 ~ 9</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; res;\n\n    vector&lt;vector&lt;int&gt;&gt; combinationSum3(int k, int n) {\n        dfs(k, n, 1, vector&lt;int&gt;());\n        return res;\n    }\n\n    void dfs(int k, int n, int start, vector&lt;int&gt; v) {\n        if(k == 0 &amp;&amp; n == 0) {\n            res.push_back(v);\n            return;\n        }\n        for(int i = start; i &lt;= 9; i++) {\n            if(i &lt;= n) {\n                v.push_back(i);\n                dfs(k - 1, n - i, i + 1, v);\n                v.pop_back();\n            }\n        }\n    }\n};\n</code></pre>\n<p><strong>还可以再剪枝</strong></p>\n<h1 id=\"560-Subarray-Sum-Equals-K\"><a href=\"https://leetcode-cn.com/problems/subarray-sum-equals-k/\" target=\"_blank\" rel=\"noopener\">560. Subarray Sum Equals K</a></h1>\n<p><a href=\"Array-Medium/image-20200515145518511.png\" title=\"image-20200515145518511\" class=\"gallery-item\"><img src=\"image-20200515145518511.png\" alt=\"image-20200515145518511\"></a></p>\n<h2 id=\"解法一：暴力【超时】\">解法一：暴力【超时】</h2>\n<p>两重循环枚举所有可能的sum</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    int subarraySum(vector&lt;int&gt;&amp; nums, int k) {\n        if(nums.size() == 1) return nums[0] == k;\n        int res = 0;\n        for(int i = 0; i &lt; nums.size(); i++) {\n            int sum = 0;\n            for(int j = i; j &lt; nums.size(); j++) {\n                sum += nums[j];\n                if(sum == k) res++;\n            }\n        } \n        return res;\n    }\n};\n</code></pre>\n<h2 id=\"解法二：前缀和\">解法二：前缀和</h2>\n<p>参考523题</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    int subarraySum(vector&lt;int&gt;&amp; nums, int k) {\n        unordered_map&lt;int, int&gt; map;\n        map[0] = 1;\n        int sum = 0, res = 0;\n        for(int&amp; i : nums) {\n            sum += i;\n            int val = sum - k;\n            res += map[val];\n            map[sum]++;\n        }\n        return res;\n    }\n};\n</code></pre>\n<h1 id=\"60-Permutation-Sequence\"><a href=\"https://leetcode-cn.com/problems/permutation-sequence/\" target=\"_blank\" rel=\"noopener\">60. Permutation Sequence</a></h1>\n<p><a href=\"Array-Medium/image-20200516003023049.png\" title=\"image-20200516003023049\" class=\"gallery-item\"><img src=\"image-20200516003023049.png\" alt=\"image-20200516003023049\"></a></p>\n<h2 id=\"解法一：回溯法【超时】\">解法一：回溯法【超时】</h2>\n<p>按顺序枚举所有可能性，用 <code>vector&lt;bool&gt;</code>来记录已经加入的数字</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    int cnt;\n    string ans;\n    string getPermutation(int n, int k) {\n        cnt = k;\n        genPermutation(n, vector&lt;bool&gt;(10, true), &quot;&quot;);\n        return ans;\n    }\n\n    void genPermutation(int n, vector&lt;bool&gt; set, string res) {\n        if(res.length() == n) {\n            cnt--;\n            if(cnt == 0) ans = res;\n        }\n        for(int i = 1; i &lt;= n; i++) {\n            if(set[i] == true) {\n                set[i] = false;\n                res += to_string(i);\n                genPermutation(n, set, res);\n                res.pop_back();\n                set[i] = true;\n            }\n        }\n    }\n\n};\n</code></pre>\n<h2 id=\"解法二：-v2\">解法二：</h2>\n<h1 id=\"78-Subsets\"><a href=\"https://leetcode-cn.com/problems/subsets/\" target=\"_blank\" rel=\"noopener\">78. Subsets</a></h1>\n<p><a href=\"Array-Medium/image-20200516142035809.png\" title=\"image-20200516142035809\" class=\"gallery-item\"><img src=\"image-20200516142035809.png\" alt=\"image-20200516142035809\"></a></p>\n<h2 id=\"解法一：回溯法-v2\">解法一：回溯法</h2>\n<p>因为没有限制条件，所以没法剪枝，也就是必须搜完所有状态</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; subsets(vector&lt;int&gt;&amp; nums) {\n        vector&lt;vector&lt;int&gt;&gt; res;\n        dfs(nums, 0, res, vector&lt;int&gt;());\n        return res;\n    }\n\n    void dfs(vector&lt;int&gt;&amp; nums, int start, vector&lt;vector&lt;int&gt;&gt;&amp; res, vector&lt;int&gt; curr) {\n        res.push_back(curr);\n        for(int i = start; i &lt; nums.size(); i++) {\n            curr.push_back(nums[i]);\n            dfs(nums, i + 1, res, curr);\n            curr.pop_back();\n        }\n    }\n};\n</code></pre>\n<h2 id=\"解法二：二进制计数\">解法二：二进制计数</h2>\n<h1 id=\"77-Combinations\"><a href=\"https://leetcode-cn.com/problems/combinations/\" target=\"_blank\" rel=\"noopener\">77. Combinations</a></h1>\n<p><a href=\"Array-Medium/image-20200516142130938.png\" title=\"image-20200516142130938\" class=\"gallery-item\"><img src=\"image-20200516142130938.png\" alt=\"image-20200516142130938\"></a></p>\n<h2 id=\"解法一：暴力回溯【超时】\">解法一：暴力回溯【超时】</h2>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; combine(int n, int k) {\n        vector&lt;vector&lt;int&gt;&gt; res;\n        combineN(n, k, 1, vector&lt;int&gt;(), res);\n        return res;\n    }\n\n    void combineN(int n, int k, int start, vector&lt;int&gt; curr, vector&lt;vector&lt;int&gt;&gt;&amp; res){\n        if(curr.size() == k) {\n            res.push_back(curr);\n            return;\n        }\n        for(int i = start; i &lt;= n; i++) {\n            curr.push_back(i);\n            combineN(n, k, i + 1, curr, res);\n            curr.pop_back();\n        }\n    }\n};\n</code></pre>\n<h3 id=\"优化剪枝【通过】\">优化剪枝【通过】</h3>\n<ul>\n<li>\n<p>由于是 n 选 k，当所以每次只需要搜到 n - (k - curr.size()) + 1处就足够了</p>\n</li>\n<li>\n<p>循环条件改为</p>\n</li>\n</ul>\n<pre><code class=\"language-cpp\">for(int i = start; i &lt;= n - (k - curr.size()) + 1; i++) {\n    // ...\n}\n</code></pre>\n<h2 id=\"解法二：二进制计数-v2\">解法二：二进制计数</h2>\n<h1 id=\"457-Circular-Array-Loop\"><a href=\"https://leetcode-cn.com/problems/circular-array-loop/\" target=\"_blank\" rel=\"noopener\">457. Circular Array Loop</a></h1>\n<p><a href=\"Array-Medium/image-20200517164411900.png\" title=\"image-20200517164411900\" class=\"gallery-item\"><img src=\"image-20200517164411900.png\" alt=\"image-20200517164411900\"></a></p>\n<h2 id=\"解法一：递归法\">解法一：递归法</h2>\n<p>错了最多次的一道题，吐了</p>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    const int INF = 1e8;\n    bool circularArrayLoop(vector&lt;int&gt;&amp; nums) {\n        for(int i = 0; i &lt; nums.size(); i++) {\n            bool dir = nums[i] &gt; 0 ? true : false;\n            if(detectCycle(nums, i, dir, nums.size()))\n                return true;\n        }\n        return false;\n    }\n\n    bool detectCycle(vector&lt;int&gt;&amp; nums, int idx, bool dir, int size) {\n        if(nums[idx] == 0) return false;\n        if(nums[idx] == INF) return true;\n        bool tdir = nums[idx] &gt; 0 ? true : false;\n        if(tdir == dir) {\n            int next = (size + (idx + nums[idx]) % size) % size;\n            nums[idx] = INF;\n            if(idx != next &amp;&amp; detectCycle(nums, next, dir, size))\n                return true;\n            else {\n                nums[idx] = 0;\n                return false;\n            }\n        }\n        return false;\n    }\n};\n</code></pre>\n<h1 id=\"209-Minimum-Size-Subarray-Sum\"><a href=\"https://leetcode-cn.com/problems/minimum-size-subarray-sum/\" target=\"_blank\" rel=\"noopener\">209. Minimum Size Subarray Sum</a></h1>\n<p><a href=\"Array-Medium/image-20200517171944389.png\" title=\"image-20200517171944389\" class=\"gallery-item\"><img src=\"image-20200517171944389.png\" alt=\"image-20200517171944389\"></a></p>\n<h2 id=\"解法一：滑动窗口\">解法一：滑动窗口</h2>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    int minSubArrayLen(int s, vector&lt;int&gt;&amp; nums) {\n        int start = 0, end = 0, len = nums.size(), min = INT32_MAX;\n        vector&lt;int&gt; sum(len + 1);\n        for(int i = 0; i &lt; len; i++)\n            sum[i + 1] += nums[i] + sum[i];\n\t\t\n        while(start &lt;= len &amp;&amp; end &lt;= len) {\n            int val = sum[end] - sum[start];\n            if(val &gt;= s) {\n                while(sum[end] - sum[start] &gt;= s)\n                    min = std::min(min, end - start++);\n            }\n            else end++;\n        }\n        return min == INT32_MAX ? 0 : min;\n    }\n};\n</code></pre>\n<h2 id=\"解法二：二分查找\">解法二：二分查找</h2>\n<ul>\n<li>复杂度不如解法一</li>\n<li>思路是对暴力法的优化，由于前缀和数组是递增的，所以把二重循环的第二层循环改成二分查找</li>\n</ul>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    int minSubArrayLen(int s, vector&lt;int&gt;&amp; nums) {\n        int len = nums.size(), min = INT32_MAX;\n        vector&lt;int&gt; sum(len + 1, 0);\n        for(int i = 0; i &lt; len; i++)\n            sum[i + 1] += nums[i] + sum[i];\n        for (int i = 1; i &lt;= len; i++) {\n            int to_find = s + sum[i - 1];\n            // 暴力for-loop 改成 lower_bound(s + sum[i - 1])\n            auto bound = lower_bound(sum.begin(), sum.end(), to_find);\n            if (bound != sum.end()) {\n                min = std::min(min, static_cast&lt;int&gt;(bound - (sum.begin() + i - 1)));\n            }\n        }\n        return min == INT32_MAX ? 0 : min;\n    }\n};\n</code></pre>\n<h1 id=\"390-Elimination-Game\"><a href=\"https://leetcode-cn.com/problems/elimination-game/\" target=\"_blank\" rel=\"noopener\">390. Elimination Game</a></h1>\n<p><a href=\"Array-Medium/image-20200517181325801.png\" title=\"image-20200517181325801\" class=\"gallery-item\"><img src=\"image-20200517181325801.png\" alt=\"image-20200517181325801\"></a></p>\n<h2 id=\"解法一：找规律\">解法一：找规律</h2>\n<ul>\n<li>\n<p>想象一个等差数列，初始首项为1，公差为1，每删一轮，数列长度减半，公差翻倍</p>\n</li>\n<li>\n<p>如果从左往右删 或 数组的长度为奇数，首项都会被删掉，其他情况则不会</p>\n</li>\n<li>\n<p>利用这个规律，如果是上一条中的情况，则<code>start = start + diff</code>，否则不变</p>\n</li>\n</ul>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    int lastRemaining(int n) {\n        return lastRemain(1, 1, n, true);\n    }\n\n    int lastRemain(int start, int diff, int len, bool left) {\n        if(len &lt;= 1) return start;\n        if(left || len % 2 != 0) start += diff; \n        return lastRemain(start, diff * 2, len / 2, !left);\n    }\n};\n</code></pre>\n<h1 id=\"152-Maximum-Product-Subarray\"><a href=\"https://leetcode-cn.com/problems/maximum-product-subarray/\" target=\"_blank\" rel=\"noopener\">152. Maximum Product Subarray</a></h1>\n<p><a href=\"Array-Medium/image-20200518011930210.png\" title=\"image-20200518011930210\" class=\"gallery-item\"><img src=\"image-20200518011930210.png\" alt=\"image-20200518011930210\"></a></p>\n<h2 id=\"解法一：DP-v3\">解法一：DP</h2>\n<p>又是子数组的题，这回的trick是</p>\n<ul>\n<li>维护两个变量，代表n为后缀的最大乘积和最小乘积</li>\n<li>如果nums[i]为正，我们自然需要最大乘积，否则需要最小乘积</li>\n<li>最大乘积如何更新？\n<ul>\n<li>取 nums[i]，max * nums[i]，min * nums[i] 中的最大者</li>\n</ul>\n</li>\n<li>最小乘积同理</li>\n</ul>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    int maxProduct(vector&lt;int&gt;&amp; nums) {\n        int Max = nums[0], Min = nums[0], res = nums[0];\n        for(int i = 1; i &lt; nums.size(); i++) {\n            int max = Max, min = Min;\n            Max = std::max(max * nums[i], std::max(nums[i], min * nums[i]));\n            Min = std::min(min * nums[i], std::min(nums[i], max * nums[i]));\n            res  = std::max(Max, res);\n        }\n        return res;\n    }\n};\n</code></pre>\n<h1 id=\"442-Find-All-Duplicates-in-an-Array\"><a href=\"https://leetcode-cn.com/problems/find-all-duplicates-in-an-array/\" target=\"_blank\" rel=\"noopener\">442. Find All Duplicates in an Array</a></h1>\n<p><a href=\"Array-Medium/image-20200523141928644.png\" title=\"image-20200523141928644\" class=\"gallery-item\"><img src=\"image-20200523141928644.png\" alt=\"image-20200523141928644\"></a></p>\n<h2 id=\"解法一：哈希\">解法一：哈希</h2>\n<p>不用说了</p>\n<h2 id=\"解法二\">解法二</h2>\n<ul>\n<li>\n<p>因为数值的范围在 1 - size 之间，所以需要找到一种方法在不影响值的情况下标记出已经出现的数字</p>\n</li>\n<li>\n<p>又因为全是正整数，所以为什么不用负号标记呢</p>\n</li>\n</ul>\n<pre><code class=\"language-cpp\">class Solution {\npublic:\n    vector&lt;int&gt; findDuplicates(vector&lt;int&gt;&amp; nums) {\n        vector&lt;int&gt; res;\n        for(int i = 0; i &lt; nums.size(); i++) {\n            int val = abs(nums[i]);\n            if (nums[val - 1] &gt; 0)\n                nums[val - 1] *= -1;\n            else\n                res.push_back(val);\n        }\n        return res;\n    }\n};\n</code></pre>\n<script src=\"https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js\"></script><script>if (typeof lightGallery !== 'undefined') {\n        var options = {\n            selector: '.gallery-item'\n        };\n        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);\n        }</script>","categories":[{"name":"Algorithm","path":"api/categories/Algorithm.json"}],"tags":[{"name":"Leetcode","path":"api/tags/Leetcode.json"}]}